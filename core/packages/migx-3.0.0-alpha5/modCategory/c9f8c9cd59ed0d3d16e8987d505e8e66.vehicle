<?php return array (
  'unique_key' => 'category',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'Snippets' => 
    array (
      '4892438d5b9ed413f82412fd32dd670c' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"getImageList","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * getImageList\\n *\\n * Copyright 2009-2014 by Bruno Perner <b.perner@gmx.de>\\n *\\n * getImageList is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * getImageList is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * getImageList; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package migx\\n *\\/\\n\\/**\\n * getImageList\\n *\\n * display Items from outputvalue of TV with custom-TV-input-type MIGX or from other JSON-string for MODx Revolution \\n *\\n * @version 1.4\\n * @author Bruno Perner <b.perner@gmx.de>\\n * @copyright Copyright &copy; 2009-2014\\n * @license http:\\/\\/www.gnu.org\\/licenses\\/old-licenses\\/gpl-2.0.html GNU General Public License\\n * version 2 or (at your option) any later version.\\n * @package migx\\n *\\/\\n\\n\\/*example: <ul>[[!getImageList? &tvname=`myTV`&tpl=`@CODE:<li>[[+idx]]<img src=\\"[[+imageURL]]\\"\\/><p>[[+imageAlt]]<\\/p><\\/li>`]]<\\/ul>*\\/\\n\\/* get default properties *\\/\\n\\n$allow_request = (bool)$modx->getOption(\'allowRequest\', $scriptProperties, false);\\n$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\n$inherit_children_tvname = $modx->getOption(\'inherit_children_tvname\', $scriptProperties, \'\');\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'\');\\n$wrapperTpl = $modx->getOption(\'wrapperTpl\', $scriptProperties, \'\');\\n$emptyTpl = $modx->getOption(\'emptyTpl\', $scriptProperties, \'\'); \\n$limit = $modx->getOption(\'limit\', $scriptProperties, \'0\');\\n$offset = $modx->getOption(\'offset\', $scriptProperties, 0);\\n$totalVar = $modx->getOption(\'totalVar\', $scriptProperties, \'total\');\\n$randomize = $modx->getOption(\'randomize\', $scriptProperties, false);\\n$preselectLimit = $modx->getOption(\'preselectLimit\', $scriptProperties, 0); \\/\\/ when random preselect important images\\n$where = $modx->getOption(\'where\', $scriptProperties, \'\');\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\n$sort = $modx->getOption(\'sort\', $scriptProperties, \'\');\\n$sort = !empty($sort) ? $modx->fromJSON($sort) : array();\\n$toSeparatePlaceholders = $modx->getOption(\'toSeparatePlaceholders\', $scriptProperties, false);\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, false);\\n$outputSeparator = $modx->getOption(\'outputSeparator\', $scriptProperties, \'\');\\n$splitSeparator = $modx->getOption(\'splitSeparator\', $scriptProperties, \'\');\\n$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'MIGX_id\');\\n$toJsonPlaceholder = $modx->getOption(\'toJsonPlaceholder\', $scriptProperties, false);\\n$jsonVarKey = $modx->getOption(\'jsonVarKey\', $scriptProperties, \'migx_outputvalue\');\\n$outputvalue = $modx->getOption(\'value\', $scriptProperties, \'\');\\nif ($allow_request) {\\n    $outputvalue = isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\n}\\n$docidVarKey = $modx->getOption(\'docidVarKey\', $scriptProperties, \'migx_docid\');\\n$docid = $modx->getOption(\'docid\', $scriptProperties, (isset($modx->resource) ? $modx->resource->get(\'id\') : 1));\\nif ($allow_request) {\\n    $docid = isset($_REQUEST[$docidVarKey]) ? $_REQUEST[$docidVarKey] : $docid;\\n}\\n$processTVs = $modx->getOption(\'processTVs\', $scriptProperties, \'1\');\\n$reverse = $modx->getOption(\'reverse\', $scriptProperties, \'0\');\\n$sumFields = $modx->getOption(\'sumFields\', $scriptProperties, \'\');\\n$sumPrefix = $modx->getOption(\'sumPrefix\', $scriptProperties, \'summary_\');\\n$addfields = $modx->getOption(\'addfields\', $scriptProperties, \'\');\\n$addfields = !empty($addfields) ? explode(\',\', $addfields) : null;\\n\\/\\/split json into parts\\n$splits = $modx->fromJson($modx->getOption(\'splits\', $scriptProperties, 0));\\n$splitTpl = $modx->getOption(\'splitTpl\', $scriptProperties, \'\');\\n$splitSeparator = $modx->getOption(\'splitSeparator\', $scriptProperties, \'\');\\n$inheritFrom = $modx->getOption(\'inheritFrom\', $scriptProperties, \'\'); \\/\\/commaseparated list of resource-ids or\\/and the keyword \'parents\' where to inherit from\\n$inheritFrom = !empty($inheritFrom) ? explode(\',\', $inheritFrom) : \'\';\\n\\n$modx->setPlaceholder(\'docid\', $docid);\\n\\n$base_path = $modx->getOption(\'base_path\', null, MODX_BASE_PATH);\\n$base_url = $modx->getOption(\'base_url\', null, MODX_BASE_URL);\\n\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\nif (!($migx instanceof Migx))\\n    return \'\';\\n$migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : \'web\';\\n\\nif (!empty($tvname)) {\\n    if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $tvname))) {\\n\\n        \\/*\\n        *   get inputProperties\\n        *\\/\\n\\n\\n        $properties = $tv->get(\'input_properties\');\\n        $properties = isset($properties[\'formtabs\']) ? $properties : $tv->getProperties();\\n\\n        $migx->config[\'configs\'] = $modx->getOption(\'configs\', $properties, \'\');\\n        if (!empty($migx->config[\'configs\'])) {\\n            $migx->loadConfigs();\\n            \\/\\/ get tabs from file or migx-config-table\\n            $formtabs = $migx->getTabs();\\n        }\\n        if (empty($formtabs) && isset($properties[\'formtabs\'])) {\\n            \\/\\/try to get formtabs and its fields from properties\\n            $formtabs = $modx->fromJSON($properties[\'formtabs\']);\\n        }\\n\\n        if (!empty($properties[\'basePath\'])) {\\n            if ($properties[\'autoResourceFolders\'] == \'true\') {\\n                $scriptProperties[\'base_path\'] = $base_path . $properties[\'basePath\'] . $docid . \'\\/\';\\n                $scriptProperties[\'base_url\'] = $base_url . $properties[\'basePath\'] . $docid . \'\\/\';\\n            } else {\\n                $scriptProperties[\'base_path\'] = $base_path . $properties[\'base_path\'];\\n                $scriptProperties[\'base_url\'] = $base_url . $properties[\'basePath\'];\\n            }\\n        }\\n        if ($jsonVarKey == \'migx_outputvalue\' && !empty($properties[\'jsonvarkey\'])) {\\n            $jsonVarKey = $properties[\'jsonvarkey\'];\\n            $outputvalue = $allow_request && isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\n        }\\n\\n        if (empty($outputvalue)) {\\n            $outputvalue = $tv->renderOutput($docid);\\n            if (empty($outputvalue) && !empty($inheritFrom)) {\\n                foreach ($inheritFrom as $from) {\\n                    if ($from == \'parents\') {\\n                        if (!empty($inherit_children_tvname)){\\n                            \\/\\/try to get items from optional MIGX-TV for children\\n                            if ($inh_tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $inherit_children_tvname))) {\\n                                $outputvalue = $inh_tv->processInheritBinding(\'\', $docid);    \\n                            }\\n                        }\\n                        $outputvalue = empty($outputvalue) ? $tv->processInheritBinding(\'\', $docid) : $outputvalue;\\n                    } else {\\n                        $outputvalue = $tv->renderOutput($from);\\n                    }\\n                    if (!empty($outputvalue)) {\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n\\n\\n        \\/*\\n        *   get inputTvs \\n        *\\/\\n        $inputTvs = array();\\n        if (is_array($formtabs)) {\\n\\n            \\/\\/multiple different Forms\\n            \\/\\/ Note: use same field-names and inputTVs in all forms\\n            $inputTvs = $migx->extractInputTvs($formtabs);\\n        }\\n        if ($migx->source = $tv->getSource($migx->working_context, false)) {\\n            $migx->source->initialize();\\n        }\\n\\n    }\\n\\n\\n}\\n\\nif (empty($outputvalue)) {\\n    $modx->setPlaceholder($totalVar, 0);\\n    return \'\';\\n}\\n\\n\\/\\/echo $outputvalue.\'<br\\/><br\\/>\';\\n\\n$items = $modx->fromJSON($outputvalue);\\n\\n\\/\\/ where filter\\nif (is_array($where) && count($where) > 0) {\\n    $items = $migx->filterItems($where, $items);\\n}\\n$modx->setPlaceholder($totalVar, count($items));\\n\\nif (!empty($reverse)) {\\n    $items = array_reverse($items);\\n}\\n\\n\\/\\/ sort items\\nif (is_array($sort) && count($sort) > 0) {\\n    $items = $migx->sortDbResult($items, $sort);\\n}\\n\\n$summaries = array();\\n$output = \'\';\\n$items = $offset > 0 ? array_slice($items, $offset) : $items;\\n$count = count($items);\\n\\nif ($count > 0) {\\n    $limit = $limit == 0 || $limit > $count ? $count : $limit;\\n    $preselectLimit = $preselectLimit > $count ? $count : $preselectLimit;\\n    \\/\\/preselect important items\\n    $preitems = array();\\n    if ($randomize && $preselectLimit > 0) {\\n        for ($i = 0; $i < $preselectLimit; $i++) {\\n            $preitems[] = $items[$i];\\n            unset($items[$i]);\\n        }\\n        $limit = $limit - count($preitems);\\n    }\\n\\n    \\/\\/shuffle items\\n    if ($randomize) {\\n        shuffle($items);\\n    }\\n\\n    \\/\\/limit items\\n    $count = count($items);\\n    $tempitems = array();\\n\\n    for ($i = 0; $i < $limit; $i++) {\\n        if ($i >= $count) {\\n            break;\\n        }\\n        $tempitems[] = $items[$i];\\n    }\\n    $items = $tempitems;\\n\\n    \\/\\/add preselected items and schuffle again\\n    if ($randomize && $preselectLimit > 0) {\\n        $items = array_merge($preitems, $items);\\n        shuffle($items);\\n    }\\n\\n    $properties = array();\\n    foreach ($scriptProperties as $property => $value) {\\n        $properties[\'property.\' . $property] = $value;\\n    }\\n\\n    $idx = 0;\\n    $output = array();\\n    $template = array();\\n    $count = count($items);\\n\\n    foreach ($items as $key => $item) {\\n        $formname = isset($item[\'MIGX_formname\']) ? $item[\'MIGX_formname\'] . \'_\' : \'\';\\n        $fields = array();\\n        foreach ($item as $field => $value) {\\n            if (is_array($value)) {\\n                if (is_array($value[0])) {\\n                    \\/\\/nested array - convert to json\\n                    $value = $modx->toJson($value);\\n                } else {\\n                    $value = implode(\'||\', $value); \\/\\/handle arrays (checkboxes, multiselects)\\n                }\\n            }\\n\\n\\n            $inputTVkey = $formname . $field;\\n\\n            if ($processTVs && isset($inputTvs[$inputTVkey])) {\\n                if (isset($inputTvs[$inputTVkey][\'inputTV\']) && $tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $inputTvs[$inputTVkey][\'inputTV\']))) {\\n\\n                } else {\\n                    $tv = $modx->newObject(\'modTemplateVar\');\\n                    $tv->set(\'type\', $inputTvs[$inputTVkey][\'inputTVtype\']);\\n                }\\n                $inputTV = $inputTvs[$inputTVkey];\\n\\n                $mTypes = $modx->getOption(\'manipulatable_url_tv_output_types\', null, \'image,file\');\\n                \\/\\/don\'t manipulate any urls here\\n                $modx->setOption(\'manipulatable_url_tv_output_types\', \'\');\\n                $tv->set(\'default_text\', $value);\\n\\n                \\/\\/ $value = $tv->renderOutput($docid); breaks if the TV used in MIGX is also assigned to this Template,\\n                \\/\\/ example tv: imageLogo is assigned to the template and imageLogo is assigned to the MIGX TV as a result\\n                \\/\\/ only the value of the imageLogo is returned for the MIGX TV instance\\n                \\/\\/ need to override default MODX method: $value = $tv->renderOutput($docid);\\n                \\/* process any TV commands in value *\\/\\n                $tv_value = $tv->processBindings($value, $docid);\\n                $params = $tv->get(\'output_properties\');\\n                if (empty($params) || $params === null) {\\n                    $params = [];\\n                }\\n                \\/* run prepareOutput to allow for custom overriding *\\/\\n                $tv_value = $tv->prepareOutput($tv_value, $docid);\\n                \\/* find the render *\\/\\n                $outputRenderPaths = $tv->getRenderDirectories(\'OnTVOutputRenderList\',\'output\');\\n                $value = $tv->getRender($params, $tv_value, $outputRenderPaths, \'output\', $docid, $tv->get(\'display\'));\\n                \\/\\/ End override of $value = $tv->renderOutput($docid);\\n\\t\\t\\t\\t\\n                \\/\\/set option back\\n                $modx->setOption(\'manipulatable_url_tv_output_types\', $mTypes);\\n                \\/\\/now manipulate urls\\n                if ($mediasource = $migx->getFieldSource($inputTV, $tv)) {\\n                    $mTypes = explode(\',\', $mTypes);\\n                    if (!empty($value) && in_array($tv->get(\'type\'), $mTypes)) {\\n                        \\/\\/$value = $mediasource->prepareOutputUrl($value);\\n                        $value = str_replace(\'\\/.\\/\', \'\\/\', $mediasource->prepareOutputUrl($value));\\n                    }\\n                }\\n\\n            }\\n            $fields[$field] = $value;\\n\\n        }\\n\\n        if (!empty($addfields)) {\\n            foreach ($addfields as $addfield) {\\n                $addfield = explode(\':\', $addfield);\\n                $addname = $addfield[0];\\n                $adddefault = isset($addfield[1]) ? $addfield[1] : \'\';\\n                $fields[$addname] = $adddefault;\\n            }\\n        }\\n\\n        if (!empty($sumFields)) {\\n            $sumFields = is_array($sumFields) ? $sumFields : explode(\',\', $sumFields);\\n            foreach ($sumFields as $sumField) {\\n                if (isset($fields[$sumField])) {\\n                    $summaries[$sumPrefix . $sumField] = $summaries[$sumPrefix . $sumField] + $fields[$sumField];\\n                    $fields[$sumPrefix . $sumField] = $summaries[$sumPrefix . $sumField];\\n                }\\n            }\\n        }\\n\\n\\n        if ($toJsonPlaceholder) {\\n            $output[] = $fields;\\n        } else {\\n            $fields[\'_alt\'] = $idx % 2;\\n            $idx++;\\n            $fields[\'_first\'] = $idx == 1 ? true : \'\';\\n            $fields[\'_last\'] = $idx == $limit ? true : \'\';\\n            $fields[\'idx\'] = $idx;\\n            $rowtpl = \'\';\\n            \\/\\/get changing tpls from field\\n            if (substr($tpl, 0, 7) == \\"@FIELD:\\") {\\n                $tplField = substr($tpl, 7);\\n                $rowtpl = $fields[$tplField];\\n            }\\n\\n            if ($fields[\'_first\'] && !empty($tplFirst)) {\\n                $rowtpl = $tplFirst;\\n            }\\n            if ($fields[\'_last\'] && empty($rowtpl) && !empty($tplLast)) {\\n                $rowtpl = $tplLast;\\n            }\\n            $tplidx = \'tpl_\' . $idx;\\n            if (empty($rowtpl) && !empty($$tplidx)) {\\n                $rowtpl = $$tplidx;\\n            }\\n            if ($idx > 1 && empty($rowtpl)) {\\n                $divisors = $migx->getDivisors($idx);\\n                if (!empty($divisors)) {\\n                    foreach ($divisors as $divisor) {\\n                        $tplnth = \'tpl_n\' . $divisor;\\n                        if (!empty($$tplnth)) {\\n                            $rowtpl = $$tplnth;\\n                            if (!empty($rowtpl)) {\\n                                break;\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n\\n            if ($count == 1 && isset($tpl_oneresult)) {\\n                $rowtpl = $tpl_oneresult;\\n            }\\n\\n            $fields = array_merge($fields, $properties);\\n\\n            if (!empty($rowtpl)) {\\n                $template = $migx->getTemplate($tpl, $template);\\n                $fields[\'_tpl\'] = $template[$tpl];\\n            } else {\\n                $rowtpl = $tpl;\\n\\n            }\\n            $template = $migx->getTemplate($rowtpl, $template);\\n\\n\\n            if ($template[$rowtpl]) {\\n                $chunk = $modx->newObject(\'modChunk\');\\n                $chunk->setCacheable(false);\\n                $chunk->setContent($template[$rowtpl]);\\n\\n\\n                if (!empty($placeholdersKeyField) && isset($fields[$placeholdersKeyField])) {\\n                    $output[$fields[$placeholdersKeyField]] = $chunk->process($fields);\\n                } else {\\n                    $output[] = $chunk->process($fields);\\n                }\\n            } else {\\n                if (!empty($placeholdersKeyField)) {\\n                    $output[$fields[$placeholdersKeyField]] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n                } else {\\n                    $output[] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n                }\\n            }\\n        }\\n\\n\\n    }\\n}\\n\\nif (count($summaries) > 0) {\\n    $modx->toPlaceholders($summaries);\\n}\\n\\n\\nif ($toJsonPlaceholder) {\\n    $modx->setPlaceholder($toJsonPlaceholder, $modx->toJson($output));\\n    return \'\';\\n}\\n\\nif (!empty($toSeparatePlaceholders)) {\\n    $modx->toPlaceholders($output, $toSeparatePlaceholders);\\n    return \'\';\\n}\\n\\/*\\nif (!empty($outerTpl))\\n$o = parseTpl($outerTpl, array(\'output\'=>implode($outputSeparator, $output)));\\nelse \\n*\\/\\n\\nif ($count > 0 && $splits > 0) {\\n    $size = ceil($count \\/ $splits);\\n    $chunks = array_chunk($output, $size);\\n    $output = array();\\n    foreach ($chunks as $chunk) {\\n        $o = implode($outputSeparator, $chunk);\\n        $output[] = $modx->getChunk($splitTpl, array(\'output\' => $o));\\n    }\\n    $outputSeparator = $splitSeparator;\\n}\\n\\nif (is_array($output)) {\\n    $o = implode($outputSeparator, $output);\\n} else {\\n    $o = $output;\\n}\\n\\nif (!empty($o) && !empty($wrapperTpl)) {\\n    $template = $migx->getTemplate($wrapperTpl);\\n    if ($template[$wrapperTpl]) {\\n        $chunk = $modx->newObject(\'modChunk\');\\n        $chunk->setCacheable(false);\\n        $chunk->setContent($template[$wrapperTpl]);\\n        $properties[\'output\'] = $o;\\n        $o = $chunk->process($properties);\\n    }\\n}\\n\\nif (empty($o) && !empty($emptyTpl)) {\\n    $template = $migx->getTemplate($emptyTpl);\\n    if ($template[$emptyTpl]) {\\n        $chunk = $modx->newObject(\'modChunk\');\\n        $chunk->setCacheable(false);\\n        $chunk->setContent($template[$emptyTpl]);\\n        $o = $chunk->process($properties);\\n    }\\n}\\n\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $o);\\n    return \'\';\\n}\\n\\nreturn $o;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * getImageList\\n *\\n * Copyright 2009-2014 by Bruno Perner <b.perner@gmx.de>\\n *\\n * getImageList is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * getImageList is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * getImageList; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package migx\\n *\\/\\n\\/**\\n * getImageList\\n *\\n * display Items from outputvalue of TV with custom-TV-input-type MIGX or from other JSON-string for MODx Revolution \\n *\\n * @version 1.4\\n * @author Bruno Perner <b.perner@gmx.de>\\n * @copyright Copyright &copy; 2009-2014\\n * @license http:\\/\\/www.gnu.org\\/licenses\\/old-licenses\\/gpl-2.0.html GNU General Public License\\n * version 2 or (at your option) any later version.\\n * @package migx\\n *\\/\\n\\n\\/*example: <ul>[[!getImageList? &tvname=`myTV`&tpl=`@CODE:<li>[[+idx]]<img src=\\"[[+imageURL]]\\"\\/><p>[[+imageAlt]]<\\/p><\\/li>`]]<\\/ul>*\\/\\n\\/* get default properties *\\/\\n\\n$allow_request = (bool)$modx->getOption(\'allowRequest\', $scriptProperties, false);\\n$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\n$inherit_children_tvname = $modx->getOption(\'inherit_children_tvname\', $scriptProperties, \'\');\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'\');\\n$wrapperTpl = $modx->getOption(\'wrapperTpl\', $scriptProperties, \'\');\\n$emptyTpl = $modx->getOption(\'emptyTpl\', $scriptProperties, \'\'); \\n$limit = $modx->getOption(\'limit\', $scriptProperties, \'0\');\\n$offset = $modx->getOption(\'offset\', $scriptProperties, 0);\\n$totalVar = $modx->getOption(\'totalVar\', $scriptProperties, \'total\');\\n$randomize = $modx->getOption(\'randomize\', $scriptProperties, false);\\n$preselectLimit = $modx->getOption(\'preselectLimit\', $scriptProperties, 0); \\/\\/ when random preselect important images\\n$where = $modx->getOption(\'where\', $scriptProperties, \'\');\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\n$sort = $modx->getOption(\'sort\', $scriptProperties, \'\');\\n$sort = !empty($sort) ? $modx->fromJSON($sort) : array();\\n$toSeparatePlaceholders = $modx->getOption(\'toSeparatePlaceholders\', $scriptProperties, false);\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, false);\\n$outputSeparator = $modx->getOption(\'outputSeparator\', $scriptProperties, \'\');\\n$splitSeparator = $modx->getOption(\'splitSeparator\', $scriptProperties, \'\');\\n$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'MIGX_id\');\\n$toJsonPlaceholder = $modx->getOption(\'toJsonPlaceholder\', $scriptProperties, false);\\n$jsonVarKey = $modx->getOption(\'jsonVarKey\', $scriptProperties, \'migx_outputvalue\');\\n$outputvalue = $modx->getOption(\'value\', $scriptProperties, \'\');\\nif ($allow_request) {\\n    $outputvalue = isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\n}\\n$docidVarKey = $modx->getOption(\'docidVarKey\', $scriptProperties, \'migx_docid\');\\n$docid = $modx->getOption(\'docid\', $scriptProperties, (isset($modx->resource) ? $modx->resource->get(\'id\') : 1));\\nif ($allow_request) {\\n    $docid = isset($_REQUEST[$docidVarKey]) ? $_REQUEST[$docidVarKey] : $docid;\\n}\\n$processTVs = $modx->getOption(\'processTVs\', $scriptProperties, \'1\');\\n$reverse = $modx->getOption(\'reverse\', $scriptProperties, \'0\');\\n$sumFields = $modx->getOption(\'sumFields\', $scriptProperties, \'\');\\n$sumPrefix = $modx->getOption(\'sumPrefix\', $scriptProperties, \'summary_\');\\n$addfields = $modx->getOption(\'addfields\', $scriptProperties, \'\');\\n$addfields = !empty($addfields) ? explode(\',\', $addfields) : null;\\n\\/\\/split json into parts\\n$splits = $modx->fromJson($modx->getOption(\'splits\', $scriptProperties, 0));\\n$splitTpl = $modx->getOption(\'splitTpl\', $scriptProperties, \'\');\\n$splitSeparator = $modx->getOption(\'splitSeparator\', $scriptProperties, \'\');\\n$inheritFrom = $modx->getOption(\'inheritFrom\', $scriptProperties, \'\'); \\/\\/commaseparated list of resource-ids or\\/and the keyword \'parents\' where to inherit from\\n$inheritFrom = !empty($inheritFrom) ? explode(\',\', $inheritFrom) : \'\';\\n\\n$modx->setPlaceholder(\'docid\', $docid);\\n\\n$base_path = $modx->getOption(\'base_path\', null, MODX_BASE_PATH);\\n$base_url = $modx->getOption(\'base_url\', null, MODX_BASE_URL);\\n\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\nif (!($migx instanceof Migx))\\n    return \'\';\\n$migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : \'web\';\\n\\nif (!empty($tvname)) {\\n    if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $tvname))) {\\n\\n        \\/*\\n        *   get inputProperties\\n        *\\/\\n\\n\\n        $properties = $tv->get(\'input_properties\');\\n        $properties = isset($properties[\'formtabs\']) ? $properties : $tv->getProperties();\\n\\n        $migx->config[\'configs\'] = $modx->getOption(\'configs\', $properties, \'\');\\n        if (!empty($migx->config[\'configs\'])) {\\n            $migx->loadConfigs();\\n            \\/\\/ get tabs from file or migx-config-table\\n            $formtabs = $migx->getTabs();\\n        }\\n        if (empty($formtabs) && isset($properties[\'formtabs\'])) {\\n            \\/\\/try to get formtabs and its fields from properties\\n            $formtabs = $modx->fromJSON($properties[\'formtabs\']);\\n        }\\n\\n        if (!empty($properties[\'basePath\'])) {\\n            if ($properties[\'autoResourceFolders\'] == \'true\') {\\n                $scriptProperties[\'base_path\'] = $base_path . $properties[\'basePath\'] . $docid . \'\\/\';\\n                $scriptProperties[\'base_url\'] = $base_url . $properties[\'basePath\'] . $docid . \'\\/\';\\n            } else {\\n                $scriptProperties[\'base_path\'] = $base_path . $properties[\'base_path\'];\\n                $scriptProperties[\'base_url\'] = $base_url . $properties[\'basePath\'];\\n            }\\n        }\\n        if ($jsonVarKey == \'migx_outputvalue\' && !empty($properties[\'jsonvarkey\'])) {\\n            $jsonVarKey = $properties[\'jsonvarkey\'];\\n            $outputvalue = $allow_request && isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\n        }\\n\\n        if (empty($outputvalue)) {\\n            $outputvalue = $tv->renderOutput($docid);\\n            if (empty($outputvalue) && !empty($inheritFrom)) {\\n                foreach ($inheritFrom as $from) {\\n                    if ($from == \'parents\') {\\n                        if (!empty($inherit_children_tvname)){\\n                            \\/\\/try to get items from optional MIGX-TV for children\\n                            if ($inh_tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $inherit_children_tvname))) {\\n                                $outputvalue = $inh_tv->processInheritBinding(\'\', $docid);    \\n                            }\\n                        }\\n                        $outputvalue = empty($outputvalue) ? $tv->processInheritBinding(\'\', $docid) : $outputvalue;\\n                    } else {\\n                        $outputvalue = $tv->renderOutput($from);\\n                    }\\n                    if (!empty($outputvalue)) {\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n\\n\\n        \\/*\\n        *   get inputTvs \\n        *\\/\\n        $inputTvs = array();\\n        if (is_array($formtabs)) {\\n\\n            \\/\\/multiple different Forms\\n            \\/\\/ Note: use same field-names and inputTVs in all forms\\n            $inputTvs = $migx->extractInputTvs($formtabs);\\n        }\\n        if ($migx->source = $tv->getSource($migx->working_context, false)) {\\n            $migx->source->initialize();\\n        }\\n\\n    }\\n\\n\\n}\\n\\nif (empty($outputvalue)) {\\n    $modx->setPlaceholder($totalVar, 0);\\n    return \'\';\\n}\\n\\n\\/\\/echo $outputvalue.\'<br\\/><br\\/>\';\\n\\n$items = $modx->fromJSON($outputvalue);\\n\\n\\/\\/ where filter\\nif (is_array($where) && count($where) > 0) {\\n    $items = $migx->filterItems($where, $items);\\n}\\n$modx->setPlaceholder($totalVar, count($items));\\n\\nif (!empty($reverse)) {\\n    $items = array_reverse($items);\\n}\\n\\n\\/\\/ sort items\\nif (is_array($sort) && count($sort) > 0) {\\n    $items = $migx->sortDbResult($items, $sort);\\n}\\n\\n$summaries = array();\\n$output = \'\';\\n$items = $offset > 0 ? array_slice($items, $offset) : $items;\\n$count = count($items);\\n\\nif ($count > 0) {\\n    $limit = $limit == 0 || $limit > $count ? $count : $limit;\\n    $preselectLimit = $preselectLimit > $count ? $count : $preselectLimit;\\n    \\/\\/preselect important items\\n    $preitems = array();\\n    if ($randomize && $preselectLimit > 0) {\\n        for ($i = 0; $i < $preselectLimit; $i++) {\\n            $preitems[] = $items[$i];\\n            unset($items[$i]);\\n        }\\n        $limit = $limit - count($preitems);\\n    }\\n\\n    \\/\\/shuffle items\\n    if ($randomize) {\\n        shuffle($items);\\n    }\\n\\n    \\/\\/limit items\\n    $count = count($items);\\n    $tempitems = array();\\n\\n    for ($i = 0; $i < $limit; $i++) {\\n        if ($i >= $count) {\\n            break;\\n        }\\n        $tempitems[] = $items[$i];\\n    }\\n    $items = $tempitems;\\n\\n    \\/\\/add preselected items and schuffle again\\n    if ($randomize && $preselectLimit > 0) {\\n        $items = array_merge($preitems, $items);\\n        shuffle($items);\\n    }\\n\\n    $properties = array();\\n    foreach ($scriptProperties as $property => $value) {\\n        $properties[\'property.\' . $property] = $value;\\n    }\\n\\n    $idx = 0;\\n    $output = array();\\n    $template = array();\\n    $count = count($items);\\n\\n    foreach ($items as $key => $item) {\\n        $formname = isset($item[\'MIGX_formname\']) ? $item[\'MIGX_formname\'] . \'_\' : \'\';\\n        $fields = array();\\n        foreach ($item as $field => $value) {\\n            if (is_array($value)) {\\n                if (is_array($value[0])) {\\n                    \\/\\/nested array - convert to json\\n                    $value = $modx->toJson($value);\\n                } else {\\n                    $value = implode(\'||\', $value); \\/\\/handle arrays (checkboxes, multiselects)\\n                }\\n            }\\n\\n\\n            $inputTVkey = $formname . $field;\\n\\n            if ($processTVs && isset($inputTvs[$inputTVkey])) {\\n                if (isset($inputTvs[$inputTVkey][\'inputTV\']) && $tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $inputTvs[$inputTVkey][\'inputTV\']))) {\\n\\n                } else {\\n                    $tv = $modx->newObject(\'modTemplateVar\');\\n                    $tv->set(\'type\', $inputTvs[$inputTVkey][\'inputTVtype\']);\\n                }\\n                $inputTV = $inputTvs[$inputTVkey];\\n\\n                $mTypes = $modx->getOption(\'manipulatable_url_tv_output_types\', null, \'image,file\');\\n                \\/\\/don\'t manipulate any urls here\\n                $modx->setOption(\'manipulatable_url_tv_output_types\', \'\');\\n                $tv->set(\'default_text\', $value);\\n\\n                \\/\\/ $value = $tv->renderOutput($docid); breaks if the TV used in MIGX is also assigned to this Template,\\n                \\/\\/ example tv: imageLogo is assigned to the template and imageLogo is assigned to the MIGX TV as a result\\n                \\/\\/ only the value of the imageLogo is returned for the MIGX TV instance\\n                \\/\\/ need to override default MODX method: $value = $tv->renderOutput($docid);\\n                \\/* process any TV commands in value *\\/\\n                $tv_value = $tv->processBindings($value, $docid);\\n                $params = $tv->get(\'output_properties\');\\n                if (empty($params) || $params === null) {\\n                    $params = [];\\n                }\\n                \\/* run prepareOutput to allow for custom overriding *\\/\\n                $tv_value = $tv->prepareOutput($tv_value, $docid);\\n                \\/* find the render *\\/\\n                $outputRenderPaths = $tv->getRenderDirectories(\'OnTVOutputRenderList\',\'output\');\\n                $value = $tv->getRender($params, $tv_value, $outputRenderPaths, \'output\', $docid, $tv->get(\'display\'));\\n                \\/\\/ End override of $value = $tv->renderOutput($docid);\\n\\t\\t\\t\\t\\n                \\/\\/set option back\\n                $modx->setOption(\'manipulatable_url_tv_output_types\', $mTypes);\\n                \\/\\/now manipulate urls\\n                if ($mediasource = $migx->getFieldSource($inputTV, $tv)) {\\n                    $mTypes = explode(\',\', $mTypes);\\n                    if (!empty($value) && in_array($tv->get(\'type\'), $mTypes)) {\\n                        \\/\\/$value = $mediasource->prepareOutputUrl($value);\\n                        $value = str_replace(\'\\/.\\/\', \'\\/\', $mediasource->prepareOutputUrl($value));\\n                    }\\n                }\\n\\n            }\\n            $fields[$field] = $value;\\n\\n        }\\n\\n        if (!empty($addfields)) {\\n            foreach ($addfields as $addfield) {\\n                $addfield = explode(\':\', $addfield);\\n                $addname = $addfield[0];\\n                $adddefault = isset($addfield[1]) ? $addfield[1] : \'\';\\n                $fields[$addname] = $adddefault;\\n            }\\n        }\\n\\n        if (!empty($sumFields)) {\\n            $sumFields = is_array($sumFields) ? $sumFields : explode(\',\', $sumFields);\\n            foreach ($sumFields as $sumField) {\\n                if (isset($fields[$sumField])) {\\n                    $summaries[$sumPrefix . $sumField] = $summaries[$sumPrefix . $sumField] + $fields[$sumField];\\n                    $fields[$sumPrefix . $sumField] = $summaries[$sumPrefix . $sumField];\\n                }\\n            }\\n        }\\n\\n\\n        if ($toJsonPlaceholder) {\\n            $output[] = $fields;\\n        } else {\\n            $fields[\'_alt\'] = $idx % 2;\\n            $idx++;\\n            $fields[\'_first\'] = $idx == 1 ? true : \'\';\\n            $fields[\'_last\'] = $idx == $limit ? true : \'\';\\n            $fields[\'idx\'] = $idx;\\n            $rowtpl = \'\';\\n            \\/\\/get changing tpls from field\\n            if (substr($tpl, 0, 7) == \\"@FIELD:\\") {\\n                $tplField = substr($tpl, 7);\\n                $rowtpl = $fields[$tplField];\\n            }\\n\\n            if ($fields[\'_first\'] && !empty($tplFirst)) {\\n                $rowtpl = $tplFirst;\\n            }\\n            if ($fields[\'_last\'] && empty($rowtpl) && !empty($tplLast)) {\\n                $rowtpl = $tplLast;\\n            }\\n            $tplidx = \'tpl_\' . $idx;\\n            if (empty($rowtpl) && !empty($$tplidx)) {\\n                $rowtpl = $$tplidx;\\n            }\\n            if ($idx > 1 && empty($rowtpl)) {\\n                $divisors = $migx->getDivisors($idx);\\n                if (!empty($divisors)) {\\n                    foreach ($divisors as $divisor) {\\n                        $tplnth = \'tpl_n\' . $divisor;\\n                        if (!empty($$tplnth)) {\\n                            $rowtpl = $$tplnth;\\n                            if (!empty($rowtpl)) {\\n                                break;\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n\\n            if ($count == 1 && isset($tpl_oneresult)) {\\n                $rowtpl = $tpl_oneresult;\\n            }\\n\\n            $fields = array_merge($fields, $properties);\\n\\n            if (!empty($rowtpl)) {\\n                $template = $migx->getTemplate($tpl, $template);\\n                $fields[\'_tpl\'] = $template[$tpl];\\n            } else {\\n                $rowtpl = $tpl;\\n\\n            }\\n            $template = $migx->getTemplate($rowtpl, $template);\\n\\n\\n            if ($template[$rowtpl]) {\\n                $chunk = $modx->newObject(\'modChunk\');\\n                $chunk->setCacheable(false);\\n                $chunk->setContent($template[$rowtpl]);\\n\\n\\n                if (!empty($placeholdersKeyField) && isset($fields[$placeholdersKeyField])) {\\n                    $output[$fields[$placeholdersKeyField]] = $chunk->process($fields);\\n                } else {\\n                    $output[] = $chunk->process($fields);\\n                }\\n            } else {\\n                if (!empty($placeholdersKeyField)) {\\n                    $output[$fields[$placeholdersKeyField]] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n                } else {\\n                    $output[] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n                }\\n            }\\n        }\\n\\n\\n    }\\n}\\n\\nif (count($summaries) > 0) {\\n    $modx->toPlaceholders($summaries);\\n}\\n\\n\\nif ($toJsonPlaceholder) {\\n    $modx->setPlaceholder($toJsonPlaceholder, $modx->toJson($output));\\n    return \'\';\\n}\\n\\nif (!empty($toSeparatePlaceholders)) {\\n    $modx->toPlaceholders($output, $toSeparatePlaceholders);\\n    return \'\';\\n}\\n\\/*\\nif (!empty($outerTpl))\\n$o = parseTpl($outerTpl, array(\'output\'=>implode($outputSeparator, $output)));\\nelse \\n*\\/\\n\\nif ($count > 0 && $splits > 0) {\\n    $size = ceil($count \\/ $splits);\\n    $chunks = array_chunk($output, $size);\\n    $output = array();\\n    foreach ($chunks as $chunk) {\\n        $o = implode($outputSeparator, $chunk);\\n        $output[] = $modx->getChunk($splitTpl, array(\'output\' => $o));\\n    }\\n    $outputSeparator = $splitSeparator;\\n}\\n\\nif (is_array($output)) {\\n    $o = implode($outputSeparator, $output);\\n} else {\\n    $o = $output;\\n}\\n\\nif (!empty($o) && !empty($wrapperTpl)) {\\n    $template = $migx->getTemplate($wrapperTpl);\\n    if ($template[$wrapperTpl]) {\\n        $chunk = $modx->newObject(\'modChunk\');\\n        $chunk->setCacheable(false);\\n        $chunk->setContent($template[$wrapperTpl]);\\n        $properties[\'output\'] = $o;\\n        $o = $chunk->process($properties);\\n    }\\n}\\n\\nif (empty($o) && !empty($emptyTpl)) {\\n    $template = $migx->getTemplate($emptyTpl);\\n    if ($template[$emptyTpl]) {\\n        $chunk = $modx->newObject(\'modChunk\');\\n        $chunk->setCacheable(false);\\n        $chunk->setContent($template[$emptyTpl]);\\n        $o = $chunk->process($properties);\\n    }\\n}\\n\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $o);\\n    return \'\';\\n}\\n\\nreturn $o;"}',
        'guid' => '50c0bc6697fc9ad9be3bb9b2b425eb3a',
        'native_key' => NULL,
        'signature' => '4bc44684855f30c035863d4a283725cb',
      ),
      'a46f64debb487a23da1eeb141023832f' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"migxGetRelations","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"$id = $modx->getOption(\'id\', $scriptProperties, $modx->resource->get(\'id\'));\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, \'\');\\n$element = $modx->getOption(\'element\', $scriptProperties, \'getResources\');\\n$outputSeparator = $modx->getOption(\'outputSeparator\', $scriptProperties, \',\');\\n$sourceWhere = $modx->getOption(\'sourceWhere\', $scriptProperties, \'\');\\n$ignoreRelationIfEmpty = $modx->getOption(\'ignoreRelationIfEmpty\', $scriptProperties, false);\\n$inheritFromParents = $modx->getOption(\'inheritFromParents\', $scriptProperties, false);\\n$parentIDs = $inheritFromParents ? array_merge(array($id), $modx->getParentIds($id)) : array($id);\\n\\n$packageName = \'resourcerelations\';\\n\\n$packagepath = $modx->getOption(\'core_path\') . \'components\\/\' . $packageName . \'\\/\';\\n$modelpath = $packagepath . \'model\\/\';\\n\\n$modx->addPackage($packageName, $modelpath, $prefix);\\n$classname = \'rrResourceRelation\';\\n$output = \'\';\\n\\nforeach ($parentIDs as $id) {\\n    if (!empty($id)) {\\n        $output = \'\';\\n                \\n        $c = $modx->newQuery($classname, array(\'target_id\' => $id, \'published\' => \'1\'));\\n        $c->select($modx->getSelectColumns($classname, $classname));\\n\\n        if (!empty($sourceWhere)) {\\n            $sourceWhere_ar = $modx->fromJson($sourceWhere);\\n            if (is_array($sourceWhere_ar)) {\\n                $where = array();\\n                foreach ($sourceWhere_ar as $key => $value) {\\n                    $where[\'Source.\' . $key] = $value;\\n                }\\n                $joinclass = \'modResource\';\\n                $joinalias = \'Source\';\\n                $selectfields = \'id\';\\n                $selectfields = !empty($selectfields) ? explode(\',\', $selectfields) : null;\\n                $c->leftjoin($joinclass, $joinalias);\\n                $c->select($modx->getSelectColumns($joinclass, $joinalias, $joinalias . \'_\', $selectfields));\\n                $c->where($where);\\n            }\\n        }\\n\\n        \\/\\/$c->prepare(); echo $c->toSql();\\n        if ($c->prepare() && $c->stmt->execute()) {\\n            $collection = $c->stmt->fetchAll(PDO::FETCH_ASSOC);\\n        }\\n        \\n        foreach ($collection as $row) {\\n            $ids[] = $row[\'source_id\'];\\n        }\\n        $output = implode($outputSeparator, $ids);\\n    }\\n    if (!empty($output)){\\n        break;\\n    }\\n}\\n\\n\\nif (!empty($element)) {\\n    if (empty($output) && $ignoreRelationIfEmpty) {\\n        return $modx->runSnippet($element, $scriptProperties);\\n    } else {\\n        $scriptProperties[\'resources\'] = $output;\\n        $scriptProperties[\'parents\'] = \'9999999\';\\n        return $modx->runSnippet($element, $scriptProperties);\\n    }\\n\\n\\n}\\n\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $output);\\n    return \'\';\\n}\\n\\nreturn $output;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"$id = $modx->getOption(\'id\', $scriptProperties, $modx->resource->get(\'id\'));\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, \'\');\\n$element = $modx->getOption(\'element\', $scriptProperties, \'getResources\');\\n$outputSeparator = $modx->getOption(\'outputSeparator\', $scriptProperties, \',\');\\n$sourceWhere = $modx->getOption(\'sourceWhere\', $scriptProperties, \'\');\\n$ignoreRelationIfEmpty = $modx->getOption(\'ignoreRelationIfEmpty\', $scriptProperties, false);\\n$inheritFromParents = $modx->getOption(\'inheritFromParents\', $scriptProperties, false);\\n$parentIDs = $inheritFromParents ? array_merge(array($id), $modx->getParentIds($id)) : array($id);\\n\\n$packageName = \'resourcerelations\';\\n\\n$packagepath = $modx->getOption(\'core_path\') . \'components\\/\' . $packageName . \'\\/\';\\n$modelpath = $packagepath . \'model\\/\';\\n\\n$modx->addPackage($packageName, $modelpath, $prefix);\\n$classname = \'rrResourceRelation\';\\n$output = \'\';\\n\\nforeach ($parentIDs as $id) {\\n    if (!empty($id)) {\\n        $output = \'\';\\n                \\n        $c = $modx->newQuery($classname, array(\'target_id\' => $id, \'published\' => \'1\'));\\n        $c->select($modx->getSelectColumns($classname, $classname));\\n\\n        if (!empty($sourceWhere)) {\\n            $sourceWhere_ar = $modx->fromJson($sourceWhere);\\n            if (is_array($sourceWhere_ar)) {\\n                $where = array();\\n                foreach ($sourceWhere_ar as $key => $value) {\\n                    $where[\'Source.\' . $key] = $value;\\n                }\\n                $joinclass = \'modResource\';\\n                $joinalias = \'Source\';\\n                $selectfields = \'id\';\\n                $selectfields = !empty($selectfields) ? explode(\',\', $selectfields) : null;\\n                $c->leftjoin($joinclass, $joinalias);\\n                $c->select($modx->getSelectColumns($joinclass, $joinalias, $joinalias . \'_\', $selectfields));\\n                $c->where($where);\\n            }\\n        }\\n\\n        \\/\\/$c->prepare(); echo $c->toSql();\\n        if ($c->prepare() && $c->stmt->execute()) {\\n            $collection = $c->stmt->fetchAll(PDO::FETCH_ASSOC);\\n        }\\n        \\n        foreach ($collection as $row) {\\n            $ids[] = $row[\'source_id\'];\\n        }\\n        $output = implode($outputSeparator, $ids);\\n    }\\n    if (!empty($output)){\\n        break;\\n    }\\n}\\n\\n\\nif (!empty($element)) {\\n    if (empty($output) && $ignoreRelationIfEmpty) {\\n        return $modx->runSnippet($element, $scriptProperties);\\n    } else {\\n        $scriptProperties[\'resources\'] = $output;\\n        $scriptProperties[\'parents\'] = \'9999999\';\\n        return $modx->runSnippet($element, $scriptProperties);\\n    }\\n\\n\\n}\\n\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $output);\\n    return \'\';\\n}\\n\\nreturn $output;"}',
        'guid' => '9f6b17e1601c60c091e9776d8fb56ac6',
        'native_key' => NULL,
        'signature' => '81c0c02625ffb9cd795bb3e0afa50d09',
      ),
      '0df5b087b04cc54e108278a71bcd29c9' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"migx","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'\');\\n$limit = $modx->getOption(\'limit\', $scriptProperties, \'0\');\\n$offset = $modx->getOption(\'offset\', $scriptProperties, 0);\\n$totalVar = $modx->getOption(\'totalVar\', $scriptProperties, \'total\');\\n$randomize = $modx->getOption(\'randomize\', $scriptProperties, false);\\n$preselectLimit = $modx->getOption(\'preselectLimit\', $scriptProperties, 0); \\/\\/ when random preselect important images\\n$where = $modx->getOption(\'where\', $scriptProperties, \'\');\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\n$sortConfig = $modx->getOption(\'sortConfig\', $scriptProperties, \'\');\\n$sortConfig = !empty($sortConfig) ? $modx->fromJSON($sortConfig) : array();\\n$configs = $modx->getOption(\'configs\', $scriptProperties, \'\');\\n$configs = !empty($configs) ? explode(\',\',$configs):array();\\n$toSeparatePlaceholders = $modx->getOption(\'toSeparatePlaceholders\', $scriptProperties, false);\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, false);\\n$outputSeparator = $modx->getOption(\'outputSeparator\', $scriptProperties, \'\');\\n\\/\\/$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'MIGX_id\');\\n$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'id\');\\n$toJsonPlaceholder = $modx->getOption(\'toJsonPlaceholder\', $scriptProperties, false);\\n$jsonVarKey = $modx->getOption(\'jsonVarKey\', $scriptProperties, \'migx_outputvalue\');\\n$outputvalue = $modx->getOption(\'value\', $scriptProperties, \'\');\\n$outputvalue = isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\n$docidVarKey = $modx->getOption(\'docidVarKey\', $scriptProperties, \'migx_docid\');\\n$docid = $modx->getOption(\'docid\', $scriptProperties, (isset($modx->resource) ? $modx->resource->get(\'id\') : 1));\\n$docid = isset($_REQUEST[$docidVarKey]) ? $_REQUEST[$docidVarKey] : $docid;\\n$processTVs = $modx->getOption(\'processTVs\', $scriptProperties, \'1\');\\n\\n$base_path = $modx->getOption(\'base_path\', null, MODX_BASE_PATH);\\n$base_url = $modx->getOption(\'base_url\', null, MODX_BASE_URL);\\n\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\nif (!($migx instanceof Migx))\\n    return \'\';\\n\\/\\/$modx->migx = &$migx;\\n$defaultcontext = \'web\';\\n$migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : $defaultcontext;\\n\\nif (!empty($tvname))\\n{\\n    if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $tvname)))\\n    {\\n\\n        \\/*\\n        *   get inputProperties\\n        *\\/\\n\\n\\n        $properties = $tv->get(\'input_properties\');\\n        $properties = isset($properties[\'configs\']) ? $properties : $tv->getProperties();\\n        $cfgs = $modx->getOption(\'configs\',$properties,\'\');\\n        if (!empty($cfgs)){\\n            $cfgs = explode(\',\',$cfgs);\\n            $configs = array_merge($configs,$cfgs);\\n           \\n        }\\n        \\n    }\\n}\\n\\n\\n\\n\\/\\/$migx->config[\'configs\'] = implode(\',\',$configs);\\n$migx->loadConfigs(false,true,array(\'configs\'=>implode(\',\',$configs)));\\n$migx->customconfigs = array_merge($migx->customconfigs,$scriptProperties);\\n\\n\\n\\n\\/\\/ get tabs from file or migx-config-table\\n$formtabs = $migx->getTabs();\\nif (empty($formtabs))\\n{\\n    \\/\\/try to get formtabs and its fields from properties\\n    $formtabs = $modx->fromJSON($properties[\'formtabs\']);\\n}\\n\\nif ($jsonVarKey == \'migx_outputvalue\' && !empty($properties[\'jsonvarkey\']))\\n{\\n    $jsonVarKey = $properties[\'jsonvarkey\'];\\n    $outputvalue = isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\n}\\n\\n$outputvalue = $tv && empty($outputvalue) ? $tv->renderOutput($docid) : $outputvalue;\\n\\/*\\n*   get inputTvs \\n*\\/\\n$inputTvs = array();\\nif (is_array($formtabs))\\n{\\n\\n    \\/\\/multiple different Forms\\n    \\/\\/ Note: use same field-names and inputTVs in all forms\\n    $inputTvs = $migx->extractInputTvs($formtabs);\\n}\\n\\nif ($tv)\\n{\\n    $migx->source = $tv->getSource($migx->working_context, false);\\n}\\n\\n\\/\\/$task = $modx->migx->getTask();\\n$filename = \'getlist.php\';\\n$processorspath = $migx->config[\'processorsPath\'] . \'mgr\\/\';\\n$filenames = array();\\n$scriptProperties[\'start\'] = $modx->getOption(\'offset\', $scriptProperties, 0);\\nif ($processor_file = $migx->findProcessor($processorspath, $filename, $filenames))\\n{\\n    include ($processor_file);\\n    \\/\\/todo: add getlist-processor for default-MIGX-TV\\n}\\n\\n$items = isset($rows) && is_array($rows) ? $rows : array();\\n$modx->setPlaceholder($totalVar, isset($count) ? $count : 0);\\n\\n$properties = array();\\nforeach ($scriptProperties as $property => $value)\\n{\\n    $properties[\'property.\' . $property] = $value;\\n}\\n\\n$idx = 0;\\n$output = array();\\nforeach ($items as $key => $item)\\n{\\n\\n    $fields = array();\\n    foreach ($item as $field => $value)\\n    {\\n        $value = is_array($value) ? implode(\'||\', $value) : $value; \\/\\/handle arrays (checkboxes, multiselects)\\n        if ($processTVs && isset($inputTvs[$field]))\\n        {\\n            if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $inputTvs[$field][\'inputTV\'])))\\n            {\\n\\n            } else\\n            {\\n                $tv = $modx->newObject(\'modTemplateVar\');\\n                $tv->set(\'type\', $inputTvs[$field][\'inputTVtype\']);\\n            }\\n            $inputTV = $inputTvs[$field];\\n\\n            $mTypes = $modx->getOption(\'manipulatable_url_tv_output_types\', null, \'image,file\');\\n            \\/\\/don\'t manipulate any urls here\\n            $modx->setOption(\'manipulatable_url_tv_output_types\', \'\');\\n            $tv->set(\'default_text\', $value);\\n            $value = $tv->renderOutput($docid);\\n            \\/\\/set option back\\n            $modx->setOption(\'manipulatable_url_tv_output_types\', $mTypes);\\n            \\/\\/now manipulate urls\\n            if ($mediasource = $migx->getFieldSource($inputTV, $tv))\\n            {\\n                $mTypes = explode(\',\', $mTypes);\\n                if (!empty($value) && in_array($tv->get(\'type\'), $mTypes))\\n                {\\n                    \\/\\/$value = $mediasource->prepareOutputUrl($value);\\n                    $value = str_replace(\'\\/.\\/\', \'\\/\', $mediasource->prepareOutputUrl($value));\\n                }\\n            }\\n\\n        }\\n        $fields[$field] = $value;\\n\\n    }\\n    if ($toJsonPlaceholder)\\n    {\\n        $output[] = $fields;\\n    } else\\n    {\\n        $fields[\'_alt\'] = $idx % 2;\\n        $idx++;\\n        $fields[\'_first\'] = $idx == 1 ? true : \'\';\\n        $fields[\'_last\'] = $idx == $limit ? true : \'\';\\n        $fields[\'idx\'] = $idx;\\n        $rowtpl = $tpl;\\n        \\/\\/get changing tpls from field\\n        if (substr($tpl, 0, 7) == \\"@FIELD:\\")\\n        {\\n            $tplField = substr($tpl, 7);\\n            $rowtpl = $fields[$tplField];\\n        }\\n\\n        if (!isset($template[$rowtpl]))\\n        {\\n            if (substr($rowtpl, 0, 6) == \\"@FILE:\\")\\n            {\\n                $template[$rowtpl] = file_get_contents($modx->config[\'base_path\'] . substr($rowtpl, 6));\\n            } elseif (substr($rowtpl, 0, 6) == \\"@CODE:\\")\\n            {\\n                $template[$rowtpl] = substr($tpl, 6);\\n            } elseif ($chunk = $modx->getObject(\'modChunk\', array(\'name\' => $rowtpl), true))\\n            {\\n                $template[$rowtpl] = $chunk->getContent();\\n            } else\\n            {\\n                $template[$rowtpl] = false;\\n            }\\n        }\\n\\n        $fields = array_merge($fields, $properties);\\n\\n        if ($template[$rowtpl])\\n        {\\n            $chunk = $modx->newObject(\'modChunk\');\\n            $chunk->setCacheable(false);\\n            $chunk->setContent($template[$rowtpl]);\\n            if (!empty($placeholdersKeyField) && isset($fields[$placeholdersKeyField]))\\n            {\\n                $output[$fields[$placeholdersKeyField]] = $chunk->process($fields);\\n            } else\\n            {\\n                $output[] = $chunk->process($fields);\\n            }\\n        } else\\n        {\\n            if (!empty($placeholdersKeyField))\\n            {\\n                $output[$fields[$placeholdersKeyField]] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n            } else\\n            {\\n                $output[] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n            }\\n        }\\n    }\\n\\n\\n}\\n\\n\\nif ($toJsonPlaceholder)\\n{\\n    $modx->setPlaceholder($toJsonPlaceholder, $modx->toJson($output));\\n    return \'\';\\n}\\n\\nif (!empty($toSeparatePlaceholders))\\n{\\n    $modx->toPlaceholders($output, $toSeparatePlaceholders);\\n    return \'\';\\n}\\n\\/*\\nif (!empty($outerTpl))\\n$o = parseTpl($outerTpl, array(\'output\'=>implode($outputSeparator, $output)));\\nelse \\n*\\/\\nif (is_array($output))\\n{\\n    $o = implode($outputSeparator, $output);\\n} else\\n{\\n    $o = $output;\\n}\\n\\nif (!empty($toPlaceholder))\\n{\\n    $modx->setPlaceholder($toPlaceholder, $o);\\n    return \'\';\\n}\\n\\nreturn $o;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'\');\\n$limit = $modx->getOption(\'limit\', $scriptProperties, \'0\');\\n$offset = $modx->getOption(\'offset\', $scriptProperties, 0);\\n$totalVar = $modx->getOption(\'totalVar\', $scriptProperties, \'total\');\\n$randomize = $modx->getOption(\'randomize\', $scriptProperties, false);\\n$preselectLimit = $modx->getOption(\'preselectLimit\', $scriptProperties, 0); \\/\\/ when random preselect important images\\n$where = $modx->getOption(\'where\', $scriptProperties, \'\');\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\n$sortConfig = $modx->getOption(\'sortConfig\', $scriptProperties, \'\');\\n$sortConfig = !empty($sortConfig) ? $modx->fromJSON($sortConfig) : array();\\n$configs = $modx->getOption(\'configs\', $scriptProperties, \'\');\\n$configs = !empty($configs) ? explode(\',\',$configs):array();\\n$toSeparatePlaceholders = $modx->getOption(\'toSeparatePlaceholders\', $scriptProperties, false);\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, false);\\n$outputSeparator = $modx->getOption(\'outputSeparator\', $scriptProperties, \'\');\\n\\/\\/$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'MIGX_id\');\\n$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'id\');\\n$toJsonPlaceholder = $modx->getOption(\'toJsonPlaceholder\', $scriptProperties, false);\\n$jsonVarKey = $modx->getOption(\'jsonVarKey\', $scriptProperties, \'migx_outputvalue\');\\n$outputvalue = $modx->getOption(\'value\', $scriptProperties, \'\');\\n$outputvalue = isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\n$docidVarKey = $modx->getOption(\'docidVarKey\', $scriptProperties, \'migx_docid\');\\n$docid = $modx->getOption(\'docid\', $scriptProperties, (isset($modx->resource) ? $modx->resource->get(\'id\') : 1));\\n$docid = isset($_REQUEST[$docidVarKey]) ? $_REQUEST[$docidVarKey] : $docid;\\n$processTVs = $modx->getOption(\'processTVs\', $scriptProperties, \'1\');\\n\\n$base_path = $modx->getOption(\'base_path\', null, MODX_BASE_PATH);\\n$base_url = $modx->getOption(\'base_url\', null, MODX_BASE_URL);\\n\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\nif (!($migx instanceof Migx))\\n    return \'\';\\n\\/\\/$modx->migx = &$migx;\\n$defaultcontext = \'web\';\\n$migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : $defaultcontext;\\n\\nif (!empty($tvname))\\n{\\n    if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $tvname)))\\n    {\\n\\n        \\/*\\n        *   get inputProperties\\n        *\\/\\n\\n\\n        $properties = $tv->get(\'input_properties\');\\n        $properties = isset($properties[\'configs\']) ? $properties : $tv->getProperties();\\n        $cfgs = $modx->getOption(\'configs\',$properties,\'\');\\n        if (!empty($cfgs)){\\n            $cfgs = explode(\',\',$cfgs);\\n            $configs = array_merge($configs,$cfgs);\\n           \\n        }\\n        \\n    }\\n}\\n\\n\\n\\n\\/\\/$migx->config[\'configs\'] = implode(\',\',$configs);\\n$migx->loadConfigs(false,true,array(\'configs\'=>implode(\',\',$configs)));\\n$migx->customconfigs = array_merge($migx->customconfigs,$scriptProperties);\\n\\n\\n\\n\\/\\/ get tabs from file or migx-config-table\\n$formtabs = $migx->getTabs();\\nif (empty($formtabs))\\n{\\n    \\/\\/try to get formtabs and its fields from properties\\n    $formtabs = $modx->fromJSON($properties[\'formtabs\']);\\n}\\n\\nif ($jsonVarKey == \'migx_outputvalue\' && !empty($properties[\'jsonvarkey\']))\\n{\\n    $jsonVarKey = $properties[\'jsonvarkey\'];\\n    $outputvalue = isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\n}\\n\\n$outputvalue = $tv && empty($outputvalue) ? $tv->renderOutput($docid) : $outputvalue;\\n\\/*\\n*   get inputTvs \\n*\\/\\n$inputTvs = array();\\nif (is_array($formtabs))\\n{\\n\\n    \\/\\/multiple different Forms\\n    \\/\\/ Note: use same field-names and inputTVs in all forms\\n    $inputTvs = $migx->extractInputTvs($formtabs);\\n}\\n\\nif ($tv)\\n{\\n    $migx->source = $tv->getSource($migx->working_context, false);\\n}\\n\\n\\/\\/$task = $modx->migx->getTask();\\n$filename = \'getlist.php\';\\n$processorspath = $migx->config[\'processorsPath\'] . \'mgr\\/\';\\n$filenames = array();\\n$scriptProperties[\'start\'] = $modx->getOption(\'offset\', $scriptProperties, 0);\\nif ($processor_file = $migx->findProcessor($processorspath, $filename, $filenames))\\n{\\n    include ($processor_file);\\n    \\/\\/todo: add getlist-processor for default-MIGX-TV\\n}\\n\\n$items = isset($rows) && is_array($rows) ? $rows : array();\\n$modx->setPlaceholder($totalVar, isset($count) ? $count : 0);\\n\\n$properties = array();\\nforeach ($scriptProperties as $property => $value)\\n{\\n    $properties[\'property.\' . $property] = $value;\\n}\\n\\n$idx = 0;\\n$output = array();\\nforeach ($items as $key => $item)\\n{\\n\\n    $fields = array();\\n    foreach ($item as $field => $value)\\n    {\\n        $value = is_array($value) ? implode(\'||\', $value) : $value; \\/\\/handle arrays (checkboxes, multiselects)\\n        if ($processTVs && isset($inputTvs[$field]))\\n        {\\n            if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $inputTvs[$field][\'inputTV\'])))\\n            {\\n\\n            } else\\n            {\\n                $tv = $modx->newObject(\'modTemplateVar\');\\n                $tv->set(\'type\', $inputTvs[$field][\'inputTVtype\']);\\n            }\\n            $inputTV = $inputTvs[$field];\\n\\n            $mTypes = $modx->getOption(\'manipulatable_url_tv_output_types\', null, \'image,file\');\\n            \\/\\/don\'t manipulate any urls here\\n            $modx->setOption(\'manipulatable_url_tv_output_types\', \'\');\\n            $tv->set(\'default_text\', $value);\\n            $value = $tv->renderOutput($docid);\\n            \\/\\/set option back\\n            $modx->setOption(\'manipulatable_url_tv_output_types\', $mTypes);\\n            \\/\\/now manipulate urls\\n            if ($mediasource = $migx->getFieldSource($inputTV, $tv))\\n            {\\n                $mTypes = explode(\',\', $mTypes);\\n                if (!empty($value) && in_array($tv->get(\'type\'), $mTypes))\\n                {\\n                    \\/\\/$value = $mediasource->prepareOutputUrl($value);\\n                    $value = str_replace(\'\\/.\\/\', \'\\/\', $mediasource->prepareOutputUrl($value));\\n                }\\n            }\\n\\n        }\\n        $fields[$field] = $value;\\n\\n    }\\n    if ($toJsonPlaceholder)\\n    {\\n        $output[] = $fields;\\n    } else\\n    {\\n        $fields[\'_alt\'] = $idx % 2;\\n        $idx++;\\n        $fields[\'_first\'] = $idx == 1 ? true : \'\';\\n        $fields[\'_last\'] = $idx == $limit ? true : \'\';\\n        $fields[\'idx\'] = $idx;\\n        $rowtpl = $tpl;\\n        \\/\\/get changing tpls from field\\n        if (substr($tpl, 0, 7) == \\"@FIELD:\\")\\n        {\\n            $tplField = substr($tpl, 7);\\n            $rowtpl = $fields[$tplField];\\n        }\\n\\n        if (!isset($template[$rowtpl]))\\n        {\\n            if (substr($rowtpl, 0, 6) == \\"@FILE:\\")\\n            {\\n                $template[$rowtpl] = file_get_contents($modx->config[\'base_path\'] . substr($rowtpl, 6));\\n            } elseif (substr($rowtpl, 0, 6) == \\"@CODE:\\")\\n            {\\n                $template[$rowtpl] = substr($tpl, 6);\\n            } elseif ($chunk = $modx->getObject(\'modChunk\', array(\'name\' => $rowtpl), true))\\n            {\\n                $template[$rowtpl] = $chunk->getContent();\\n            } else\\n            {\\n                $template[$rowtpl] = false;\\n            }\\n        }\\n\\n        $fields = array_merge($fields, $properties);\\n\\n        if ($template[$rowtpl])\\n        {\\n            $chunk = $modx->newObject(\'modChunk\');\\n            $chunk->setCacheable(false);\\n            $chunk->setContent($template[$rowtpl]);\\n            if (!empty($placeholdersKeyField) && isset($fields[$placeholdersKeyField]))\\n            {\\n                $output[$fields[$placeholdersKeyField]] = $chunk->process($fields);\\n            } else\\n            {\\n                $output[] = $chunk->process($fields);\\n            }\\n        } else\\n        {\\n            if (!empty($placeholdersKeyField))\\n            {\\n                $output[$fields[$placeholdersKeyField]] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n            } else\\n            {\\n                $output[] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n            }\\n        }\\n    }\\n\\n\\n}\\n\\n\\nif ($toJsonPlaceholder)\\n{\\n    $modx->setPlaceholder($toJsonPlaceholder, $modx->toJson($output));\\n    return \'\';\\n}\\n\\nif (!empty($toSeparatePlaceholders))\\n{\\n    $modx->toPlaceholders($output, $toSeparatePlaceholders);\\n    return \'\';\\n}\\n\\/*\\nif (!empty($outerTpl))\\n$o = parseTpl($outerTpl, array(\'output\'=>implode($outputSeparator, $output)));\\nelse \\n*\\/\\nif (is_array($output))\\n{\\n    $o = implode($outputSeparator, $output);\\n} else\\n{\\n    $o = $output;\\n}\\n\\nif (!empty($toPlaceholder))\\n{\\n    $modx->setPlaceholder($toPlaceholder, $o);\\n    return \'\';\\n}\\n\\nreturn $o;"}',
        'guid' => '8269a75278d299df46ce1bfffae00307',
        'native_key' => NULL,
        'signature' => 'ca01eb9e7d6ee7d6faf8cd68bc1541f9',
      ),
      '98aae72945edbbecf8e1ad32b3228b5a' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"migxLoopCollection","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/*\\ngetXpdoInstanceAndAddPackage - properties\\n\\n$prefix\\n$usecustomprefix\\n$packageName\\n\\n\\nprepareQuery - properties:\\n\\n$limit\\n$offset\\n$totalVar\\n$where\\n$queries\\n$sortConfig\\n$groupby\\n$joins\\n$selectfields\\n$classname\\n$debug\\n\\nrenderOutput - properties:\\n\\n$tpl\\n$wrapperTpl\\n$toSeparatePlaceholders\\n$toPlaceholder\\n$outputSeparator\\n$placeholdersKeyField\\n$toJsonPlaceholder\\n$jsonVarKey\\n$addfields\\n\\n*\\/\\n\\n\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\nif (!($migx instanceof Migx))\\n    return \'\';\\n\\/\\/$modx->migx = &$migx;\\n\\n$xpdo = $migx->getXpdoInstanceAndAddPackage($scriptProperties);\\n\\n$defaultcontext = \'web\';\\n$migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : $defaultcontext;\\n\\n$c = $migx->prepareQuery($xpdo,$scriptProperties);\\n$rows = $migx->getCollection($c);\\n\\n$output = $migx->renderOutput($rows,$scriptProperties);\\n\\nreturn $output;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"\\/*\\ngetXpdoInstanceAndAddPackage - properties\\n\\n$prefix\\n$usecustomprefix\\n$packageName\\n\\n\\nprepareQuery - properties:\\n\\n$limit\\n$offset\\n$totalVar\\n$where\\n$queries\\n$sortConfig\\n$groupby\\n$joins\\n$selectfields\\n$classname\\n$debug\\n\\nrenderOutput - properties:\\n\\n$tpl\\n$wrapperTpl\\n$toSeparatePlaceholders\\n$toPlaceholder\\n$outputSeparator\\n$placeholdersKeyField\\n$toJsonPlaceholder\\n$jsonVarKey\\n$addfields\\n\\n*\\/\\n\\n\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\nif (!($migx instanceof Migx))\\n    return \'\';\\n\\/\\/$modx->migx = &$migx;\\n\\n$xpdo = $migx->getXpdoInstanceAndAddPackage($scriptProperties);\\n\\n$defaultcontext = \'web\';\\n$migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : $defaultcontext;\\n\\n$c = $migx->prepareQuery($xpdo,$scriptProperties);\\n$rows = $migx->getCollection($c);\\n\\n$output = $migx->renderOutput($rows,$scriptProperties);\\n\\nreturn $output;"}',
        'guid' => 'cf41ae9f0d032cfbee7a001bbc984690',
        'native_key' => NULL,
        'signature' => '012d1c88d4c2ba370b7967b8ba4dbf41',
      ),
      '353a37669ac6272ec10ad51fdea71002' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"migxResourceMediaPath","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * @name migxResourceMediaPath\\n * @description Dynamically calculates the upload path for a given resource\\n * \\n * This Snippet is meant to dynamically calculate your baseBath attribute\\n * for custom Media Sources.  This is useful if you wish to shepard uploaded\\n * images to a folder dedicated to a given resource.  E.g. page 123 would \\n * have its own images that page 456 could not reference.\\n *\\n * USAGE:\\n * [[migxResourceMediaPath? &pathTpl=`assets\\/businesses\\/{id}\\/`]]\\n * [[migxResourceMediaPath? &pathTpl=`assets\\/test\\/{breadcrumb}`]]\\n * [[migxResourceMediaPath? &pathTpl=`assets\\/test\\/{breadcrumb}` &breadcrumbdepth=`2`]]\\n *\\n * PARAMETERS\\n * &pathTpl string formatting string specifying the file path. \\n *\\t\\tRelative to MODX base_path\\n *\\t\\tAvailable placeholders: {id}, {pagetitle}, {parent}\\n * &docid (optional) integer page id\\n * &createFolder (optional) boolean whether or not to create\\n *\\/\\n$pathTpl = $modx->getOption(\'pathTpl\', $scriptProperties, \'\');\\n$docid = $modx->getOption(\'docid\', $scriptProperties, \'\');\\n$createfolder = $modx->getOption(\'createFolder\', $scriptProperties, false);\\n$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\n\\n$path = \'\';\\n$createpath = false;\\n\\nif (empty($pathTpl)) {\\n    $modx->log(MODX_LOG_LEVEL_ERROR, \'[migxResourceMediaPath]: pathTpl not specified.\');\\n    return;\\n}\\n\\nif (empty($docid) && $modx->getPlaceholder(\'mediasource_docid\')) {\\n    \\/\\/ placeholder was set by some script\\n    \\/\\/ warning: the parser may not render placeholders, e.g. &docid=`[[*parent]]` may fail\\n    $docid = $modx->getPlaceholder(\'mediasource_docid\');\\n}\\n\\nif (empty($docid) && $modx->getPlaceholder(\'docid\')) {\\n    \\/\\/ placeholder was set by some script\\n    \\/\\/ warning: the parser may not render placeholders, e.g. &docid=`[[*parent]]` may fail\\n    $docid = $modx->getPlaceholder(\'docid\');\\n}\\nif (empty($docid)) {\\n\\n    \\/\\/on frontend\\n    if (is_object($modx->resource)) {\\n        $docid = $modx->resource->get(\'id\');\\n    }\\n    \\/\\/on backend\\n    else {\\n        $createpath = $createfolder;\\n        \\/\\/ We do this to read the &id param from an Ajax request\\n        $parsedUrl = parse_url($_SERVER[\'HTTP_REFERER\']);\\n        parse_str($parsedUrl[\'query\'], $parsedQuery);\\n\\n        if (isset($parsedQuery[\'amp;id\'])) {\\n            $docid = (int)$parsedQuery[\'amp;id\'];\\n        } elseif (isset($parsedQuery[\'id\'])) {\\n            $docid = (int)$parsedQuery[\'id\'];\\n        }\\n    }\\n}\\n\\nif (empty($docid)) {\\n    $modx->log(MODX_LOG_LEVEL_ERROR, \'[migxResourceMediaPath]: docid could not be determined.\');\\n    return;\\n}\\n\\nif ($resource = $modx->getObject(\'modResource\', $docid)) {\\n    $path = $pathTpl;\\n    $ultimateParent = \'\';\\n    if (strstr($path, \'{breadcrumb}\') || strstr($path, \'{ultimateparent}\')) {\\n        $depth = $modx->getOption(\'breadcrumbdepth\', $scriptProperties, 10);\\n        $ctx = $resource->get(\'context_key\');\\n        $parentids = $modx->getParentIds($docid, $depth, array(\'context\' => $ctx));\\n        $breadcrumbdepth = $modx->getOption(\'breadcrumbdepth\', $scriptProperties, count($parentids));\\n        $breadcrumbdepth = $breadcrumbdepth > count($parentids) ? count($parentids) : $breadcrumbdepth;\\n        if (count($parentids) > 1) {\\n            $parentids = array_reverse($parentids);\\n            $parentids[] = $docid;\\n            $ultimateParent = $parentids[1];\\n        } else {\\n            $ultimateParent = $docid;\\n            $parentids = array();\\n            $parentids[] = $docid;\\n        }\\n    }\\n\\n    if (strstr($path, \'{breadcrumb}\')) {\\n        $breadcrumbpath = \'\';\\n        for ($i = 1; $i <= $breadcrumbdepth; $i++) {\\n            $breadcrumbpath .= $parentids[$i] . \'\\/\';\\n        }\\n        $path = str_replace(\'{breadcrumb}\', $breadcrumbpath, $path);\\n    }\\n    \\n    if (!empty($tvname)){\\n        $path = str_replace(\'{tv_value}\', $resource->getTVValue($tvname), $path);    \\n    }\\n    $path = str_replace(\'{id}\', $docid, $path);\\n    $path = str_replace(\'{pagetitle}\', $resource->get(\'pagetitle\'), $path);\\n    $path = str_replace(\'{alias}\', $resource->get(\'alias\'), $path);\\n    $path = str_replace(\'{parent}\', $resource->get(\'parent\'), $path);\\n    $path = str_replace(\'{context_key}\', $resource->get(\'context_key\'), $path);\\n    $path = str_replace(\'{ultimateparent}\', $ultimateParent, $path);\\n    if ($template = $resource->getOne(\'Template\')) {\\n        $path = str_replace(\'{templatename}\', $template->get(\'templatename\'), $path);\\n    }\\n    if ($user = $modx->user) {\\n        $path = str_replace(\'{username}\', $modx->user->get(\'username\'), $path);\\n        $path = str_replace(\'{userid}\', $modx->user->get(\'id\'), $path);\\n    }\\n\\n    $fullpath = $modx->getOption(\'base_path\') . $path;\\n\\n    if ($createpath && !file_exists($fullpath)) {\\n\\n        $permissions = octdec(\'0\' . (int)($modx->getOption(\'new_folder_permissions\', null, \'755\', true)));\\n        if (!@mkdir($fullpath, $permissions, true)) {\\n            $modx->log(MODX_LOG_LEVEL_ERROR, sprintf(\'[migxResourceMediaPath]: could not create directory %s).\', $fullpath));\\n        } else {\\n            chmod($fullpath, $permissions);\\n        }\\n    }\\n\\n    return $path;\\n} else {\\n    $modx->log(MODX_LOG_LEVEL_ERROR, sprintf(\'[migxResourceMediaPath]: resource not found (page id %s).\', $docid));\\n    return;\\n}","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * @name migxResourceMediaPath\\n * @description Dynamically calculates the upload path for a given resource\\n * \\n * This Snippet is meant to dynamically calculate your baseBath attribute\\n * for custom Media Sources.  This is useful if you wish to shepard uploaded\\n * images to a folder dedicated to a given resource.  E.g. page 123 would \\n * have its own images that page 456 could not reference.\\n *\\n * USAGE:\\n * [[migxResourceMediaPath? &pathTpl=`assets\\/businesses\\/{id}\\/`]]\\n * [[migxResourceMediaPath? &pathTpl=`assets\\/test\\/{breadcrumb}`]]\\n * [[migxResourceMediaPath? &pathTpl=`assets\\/test\\/{breadcrumb}` &breadcrumbdepth=`2`]]\\n *\\n * PARAMETERS\\n * &pathTpl string formatting string specifying the file path. \\n *\\t\\tRelative to MODX base_path\\n *\\t\\tAvailable placeholders: {id}, {pagetitle}, {parent}\\n * &docid (optional) integer page id\\n * &createFolder (optional) boolean whether or not to create\\n *\\/\\n$pathTpl = $modx->getOption(\'pathTpl\', $scriptProperties, \'\');\\n$docid = $modx->getOption(\'docid\', $scriptProperties, \'\');\\n$createfolder = $modx->getOption(\'createFolder\', $scriptProperties, false);\\n$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\n\\n$path = \'\';\\n$createpath = false;\\n\\nif (empty($pathTpl)) {\\n    $modx->log(MODX_LOG_LEVEL_ERROR, \'[migxResourceMediaPath]: pathTpl not specified.\');\\n    return;\\n}\\n\\nif (empty($docid) && $modx->getPlaceholder(\'mediasource_docid\')) {\\n    \\/\\/ placeholder was set by some script\\n    \\/\\/ warning: the parser may not render placeholders, e.g. &docid=`[[*parent]]` may fail\\n    $docid = $modx->getPlaceholder(\'mediasource_docid\');\\n}\\n\\nif (empty($docid) && $modx->getPlaceholder(\'docid\')) {\\n    \\/\\/ placeholder was set by some script\\n    \\/\\/ warning: the parser may not render placeholders, e.g. &docid=`[[*parent]]` may fail\\n    $docid = $modx->getPlaceholder(\'docid\');\\n}\\nif (empty($docid)) {\\n\\n    \\/\\/on frontend\\n    if (is_object($modx->resource)) {\\n        $docid = $modx->resource->get(\'id\');\\n    }\\n    \\/\\/on backend\\n    else {\\n        $createpath = $createfolder;\\n        \\/\\/ We do this to read the &id param from an Ajax request\\n        $parsedUrl = parse_url($_SERVER[\'HTTP_REFERER\']);\\n        parse_str($parsedUrl[\'query\'], $parsedQuery);\\n\\n        if (isset($parsedQuery[\'amp;id\'])) {\\n            $docid = (int)$parsedQuery[\'amp;id\'];\\n        } elseif (isset($parsedQuery[\'id\'])) {\\n            $docid = (int)$parsedQuery[\'id\'];\\n        }\\n    }\\n}\\n\\nif (empty($docid)) {\\n    $modx->log(MODX_LOG_LEVEL_ERROR, \'[migxResourceMediaPath]: docid could not be determined.\');\\n    return;\\n}\\n\\nif ($resource = $modx->getObject(\'modResource\', $docid)) {\\n    $path = $pathTpl;\\n    $ultimateParent = \'\';\\n    if (strstr($path, \'{breadcrumb}\') || strstr($path, \'{ultimateparent}\')) {\\n        $depth = $modx->getOption(\'breadcrumbdepth\', $scriptProperties, 10);\\n        $ctx = $resource->get(\'context_key\');\\n        $parentids = $modx->getParentIds($docid, $depth, array(\'context\' => $ctx));\\n        $breadcrumbdepth = $modx->getOption(\'breadcrumbdepth\', $scriptProperties, count($parentids));\\n        $breadcrumbdepth = $breadcrumbdepth > count($parentids) ? count($parentids) : $breadcrumbdepth;\\n        if (count($parentids) > 1) {\\n            $parentids = array_reverse($parentids);\\n            $parentids[] = $docid;\\n            $ultimateParent = $parentids[1];\\n        } else {\\n            $ultimateParent = $docid;\\n            $parentids = array();\\n            $parentids[] = $docid;\\n        }\\n    }\\n\\n    if (strstr($path, \'{breadcrumb}\')) {\\n        $breadcrumbpath = \'\';\\n        for ($i = 1; $i <= $breadcrumbdepth; $i++) {\\n            $breadcrumbpath .= $parentids[$i] . \'\\/\';\\n        }\\n        $path = str_replace(\'{breadcrumb}\', $breadcrumbpath, $path);\\n    }\\n    \\n    if (!empty($tvname)){\\n        $path = str_replace(\'{tv_value}\', $resource->getTVValue($tvname), $path);    \\n    }\\n    $path = str_replace(\'{id}\', $docid, $path);\\n    $path = str_replace(\'{pagetitle}\', $resource->get(\'pagetitle\'), $path);\\n    $path = str_replace(\'{alias}\', $resource->get(\'alias\'), $path);\\n    $path = str_replace(\'{parent}\', $resource->get(\'parent\'), $path);\\n    $path = str_replace(\'{context_key}\', $resource->get(\'context_key\'), $path);\\n    $path = str_replace(\'{ultimateparent}\', $ultimateParent, $path);\\n    if ($template = $resource->getOne(\'Template\')) {\\n        $path = str_replace(\'{templatename}\', $template->get(\'templatename\'), $path);\\n    }\\n    if ($user = $modx->user) {\\n        $path = str_replace(\'{username}\', $modx->user->get(\'username\'), $path);\\n        $path = str_replace(\'{userid}\', $modx->user->get(\'id\'), $path);\\n    }\\n\\n    $fullpath = $modx->getOption(\'base_path\') . $path;\\n\\n    if ($createpath && !file_exists($fullpath)) {\\n\\n        $permissions = octdec(\'0\' . (int)($modx->getOption(\'new_folder_permissions\', null, \'755\', true)));\\n        if (!@mkdir($fullpath, $permissions, true)) {\\n            $modx->log(MODX_LOG_LEVEL_ERROR, sprintf(\'[migxResourceMediaPath]: could not create directory %s).\', $fullpath));\\n        } else {\\n            chmod($fullpath, $permissions);\\n        }\\n    }\\n\\n    return $path;\\n} else {\\n    $modx->log(MODX_LOG_LEVEL_ERROR, sprintf(\'[migxResourceMediaPath]: resource not found (page id %s).\', $docid));\\n    return;\\n}"}',
        'guid' => '5847f0097dc73d9cc5bce6bad9ee12aa',
        'native_key' => NULL,
        'signature' => 'c8eaeb4e9e30fde6ba0357214345b221',
      ),
      '52d9dfc49795bc69280a100fad6b8eaf' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"migxImageUpload","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"return include $modx->getOption(\'core_path\').\'components\\/migx\\/model\\/imageupload\\/imageupload.php\';","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"return include $modx->getOption(\'core_path\').\'components\\/migx\\/model\\/imageupload\\/imageupload.php\';"}',
        'guid' => 'ead9f1437ca1526d6916b9426679f206',
        'native_key' => NULL,
        'signature' => 'cb5f052c96baaf33c1583aef028ba38b',
      ),
      'ee605f0feb932aaa94d4092d70f89a4c' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"migxChunklistToJson","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"$category = $modx->getOption(\'category\', $scriptProperties, \'\');\\n$format = $modx->getOption(\'format\', $scriptProperties, \'json\');\\n\\n$classname = \'modChunk\';\\n$rows = array();\\n$output = \'\';\\n\\n$c = $modx->newQuery($classname);\\n$c->select($modx->getSelectColumns($classname, $classname, \'\', array(\'id\', \'name\')));\\n$c->sortby(\'name\');\\n\\nif (!empty($category)) {\\n    $c->where(array(\'category\' => $category));\\n}\\n\\/\\/$c->prepare();echo $c->toSql();\\nif ($collection = $modx->getCollection($classname, $c)) {\\n    $i = 0;\\n\\n    switch ($format) {\\n        case \'json\':\\n            foreach ($collection as $object) {\\n                $row[\'MIGX_id\'] = (string )$i;\\n                $row[\'name\'] = $object->get(\'name\');\\n                $row[\'selected\'] = \'0\';\\n                $rows[] = $row;\\n                $i++;\\n            }\\n            $output = $modx->toJson($rows);\\n            break;\\n        \\n        case \'optionlist\':\\n            foreach ($collection as $object) {\\n                $rows[] = $object->get(\'name\');\\n                $i++;\\n            }\\n            $output = implode(\'||\',$rows);      \\n        break;\\n            \\n    }\\n\\n\\n}\\n\\nreturn $output;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"$category = $modx->getOption(\'category\', $scriptProperties, \'\');\\n$format = $modx->getOption(\'format\', $scriptProperties, \'json\');\\n\\n$classname = \'modChunk\';\\n$rows = array();\\n$output = \'\';\\n\\n$c = $modx->newQuery($classname);\\n$c->select($modx->getSelectColumns($classname, $classname, \'\', array(\'id\', \'name\')));\\n$c->sortby(\'name\');\\n\\nif (!empty($category)) {\\n    $c->where(array(\'category\' => $category));\\n}\\n\\/\\/$c->prepare();echo $c->toSql();\\nif ($collection = $modx->getCollection($classname, $c)) {\\n    $i = 0;\\n\\n    switch ($format) {\\n        case \'json\':\\n            foreach ($collection as $object) {\\n                $row[\'MIGX_id\'] = (string )$i;\\n                $row[\'name\'] = $object->get(\'name\');\\n                $row[\'selected\'] = \'0\';\\n                $rows[] = $row;\\n                $i++;\\n            }\\n            $output = $modx->toJson($rows);\\n            break;\\n        \\n        case \'optionlist\':\\n            foreach ($collection as $object) {\\n                $rows[] = $object->get(\'name\');\\n                $i++;\\n            }\\n            $output = implode(\'||\',$rows);      \\n        break;\\n            \\n    }\\n\\n\\n}\\n\\nreturn $output;"}',
        'guid' => 'e4491e95fc8600b2aab87b74e664ed3e',
        'native_key' => NULL,
        'signature' => '27bd8d8129e4f2070b8917e854198fd4',
      ),
      '1177acd1034d25d05d4dfa5a2b7841ea' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"migxSwitchDetailChunk","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/\\/[[migxSwitchDetailChunk? &detailChunk=`detailChunk` &listingChunk=`listingChunk`]]\\n\\n\\n$properties[\'migx_id\'] = $modx->getOption(\'migx_id\',$_GET,\'\');\\n\\nif (!empty($properties[\'migx_id\'])){\\n    $output = $modx->getChunk($detailChunk,$properties);\\n}\\nelse{\\n    $output = $modx->getChunk($listingChunk);\\n}\\n\\nreturn $output;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"\\/\\/[[migxSwitchDetailChunk? &detailChunk=`detailChunk` &listingChunk=`listingChunk`]]\\n\\n\\n$properties[\'migx_id\'] = $modx->getOption(\'migx_id\',$_GET,\'\');\\n\\nif (!empty($properties[\'migx_id\'])){\\n    $output = $modx->getChunk($detailChunk,$properties);\\n}\\nelse{\\n    $output = $modx->getChunk($listingChunk);\\n}\\n\\nreturn $output;"}',
        'guid' => '31954d2d75515fc4d608b7d218cbd64a',
        'native_key' => NULL,
        'signature' => 'd24af8b7462ee1f519ebb12f15697dd1',
      ),
      '625da17b4558b6cfb8a8326ad419392c' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"getSwitchColumnCol","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"$scriptProperties = $_REQUEST;\\n$col = \'\';\\n\\/\\/ special actions, for example the showSelector - action\\n$tempParams = $modx->getOption(\'tempParams\', $scriptProperties, \'\');\\n\\nif (!empty($tempParams)) {\\n    $tempParams = $modx->fromJson($tempParams);\\n    $col = $modx->getOption(\'col\', $tempParams, \'\');\\n}\\n\\nreturn $col;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"$scriptProperties = $_REQUEST;\\n$col = \'\';\\n\\/\\/ special actions, for example the showSelector - action\\n$tempParams = $modx->getOption(\'tempParams\', $scriptProperties, \'\');\\n\\nif (!empty($tempParams)) {\\n    $tempParams = $modx->fromJson($tempParams);\\n    $col = $modx->getOption(\'col\', $tempParams, \'\');\\n}\\n\\nreturn $col;"}',
        'guid' => '07d7f04f4b55d5318b974d58c93cbcc0',
        'native_key' => NULL,
        'signature' => '49760f8aa8ca639e0e4a6afbe383232c',
      ),
      'ac5a63291bc5a2ba45ec63a073f760ad' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"getDayliMIGXrecord","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * getDayliMIGXrecord\\n *\\n * Copyright 2009-2011 by Bruno Perner <b.perner@gmx.de>\\n *\\n * getDayliMIGXrecord is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * getDayliMIGXrecord is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * getDayliMIGXrecord; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package migx\\n *\\/\\n\\/**\\n * getDayliMIGXrecord\\n *\\n * display Items from outputvalue of TV with custom-TV-input-type MIGX or from other JSON-string for MODx Revolution \\n *\\n * @version 1.0\\n * @author Bruno Perner <b.perner@gmx.de>\\n * @copyright Copyright &copy; 2012\\n * @license http:\\/\\/www.gnu.org\\/licenses\\/old-licenses\\/gpl-2.0.html GNU General Public License\\n * version 2 or (at your option) any later version.\\n * @package migx\\n *\\/\\n\\n\\/*example: [[!getDayliMIGXrecord? &tvname=`myTV`&tpl=`@CODE:<img src=\\"[[+image]]\\"\\/>` &randomize=`1`]]*\\/\\n\\/* get default properties *\\/\\n\\n\\n$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'\');\\n$randomize = $modx->getOption(\'randomize\', $scriptProperties, false);\\n$where = $modx->getOption(\'where\', $scriptProperties, \'\');\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\n$sort = $modx->getOption(\'sort\', $scriptProperties, \'\');\\n$sort = !empty($sort) ? $modx->fromJSON($sort) : array();\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, false);\\n$docid = $modx->getOption(\'docid\', $scriptProperties, (isset($modx->resource) ? $modx->resource->get(\'id\') : 1));\\n$processTVs = $modx->getOption(\'processTVs\', $scriptProperties, \'1\');\\n\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\nif (!($migx instanceof Migx))\\n    return \'\';\\n$migx->working_context = $modx->resource->get(\'context_key\');\\n\\nif (!empty($tvname)) {\\n    if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $tvname))) {\\n\\n        \\/*\\n        *   get inputProperties\\n        *\\/\\n\\n\\n        $properties = $tv->get(\'input_properties\');\\n        $properties = isset($properties[\'formtabs\']) ? $properties : $tv->getProperties();\\n\\n        $migx->config[\'configs\'] = $properties[\'configs\'];\\n        $migx->loadConfigs();\\n        \\/\\/ get tabs from file or migx-config-table\\n        $formtabs = $migx->getTabs();\\n        if (empty($formtabs)) {\\n            \\/\\/try to get formtabs and its fields from properties\\n            $formtabs = $modx->fromJSON($properties[\'formtabs\']);\\n        }\\n\\n        \\/\\/$tv->setCacheable(false);\\n        \\/\\/$outputvalue = $tv->renderOutput($docid);\\n        \\n        $tvresource = $modx->getObject(\'modTemplateVarResource\', array(\\n            \'tmplvarid\' => $tv->get(\'id\'),\\n            \'contentid\' => $docid,\\n            ));\\n\\n\\n        $outputvalue = $tvresource->get(\'value\');\\n        \\n        \\/*\\n        *   get inputTvs \\n        *\\/\\n        $inputTvs = array();\\n        if (is_array($formtabs)) {\\n\\n            \\/\\/multiple different Forms\\n            \\/\\/ Note: use same field-names and inputTVs in all forms\\n            $inputTvs = $migx->extractInputTvs($formtabs);\\n        }\\n        $migx->source = $tv->getSource($migx->working_context, false);\\n\\n        if (empty($outputvalue)) {\\n            return \'\';\\n        }\\n\\n        $items = $modx->fromJSON($outputvalue);\\n\\n\\n        \\/\\/is there an active item for the current date?\\n        $activedate = $modx->getOption(\'activedate\', $scriptProperties, strftime(\'%Y\\/%m\\/%d\'));\\n        \\/\\/$activedate = $modx->getOption(\'activedate\', $_GET, strftime(\'%Y\\/%m\\/%d\'));\\n        $activewhere = array();\\n        $activewhere[\'activedate\'] = $activedate;\\n        $activewhere[\'activated\'] = \'1\';\\n        $activeitems = $migx->filterItems($activewhere, $items);\\n\\n        if (count($activeitems) == 0) {\\n\\n            $activeitems = array();\\n            \\/\\/ where filter\\n            if (is_array($where) && count($where) > 0) {\\n                $items = $migx->filterItems($where, $items);\\n            }\\n\\n            $tempitems = array();\\n            $count = count($items);\\n            $emptycount = 0;\\n            $latestdate = $activedate;\\n            $nextdate = strtotime($latestdate);\\n            foreach ($items as $item) {\\n                \\/\\/empty all dates and active-states which are older than today\\n                if (!empty($item[\'activedate\']) && $item[\'activedate\'] < $activedate) {\\n                    $item[\'activated\'] = \'0\';\\n                    $item[\'activedate\'] = \'\';\\n                }\\n                if (empty($item[\'activedate\'])) {\\n                    $emptycount++;\\n                }\\n                if ($item[\'activedate\'] > $latestdate) {\\n                    $latestdate = $item[\'activedate\'];\\n                    $nextdate = strtotime($latestdate) + (24 * 60 * 60);\\n                }\\n                if ($item[\'activedate\'] == $activedate) {\\n                    $item[\'activated\'] = \'1\';\\n                    $activeitems[] = $item;\\n                }\\n                $tempitems[] = $item;\\n            }\\n\\n            \\/\\/echo \'<pre>\' . print_r($tempitems, 1) . \'<\\/pre>\';\\n\\n            $items = $tempitems;\\n\\n\\n            \\/\\/are there more than half of all items with empty activedates\\n\\n            if ($emptycount >= $count \\/ 2) {\\n\\n                \\/\\/ sort items\\n                if (is_array($sort) && count($sort) > 0) {\\n                    $items = $migx->sortDbResult($items, $sort);\\n                }\\n                if (count($items) > 0) {\\n                    \\/\\/shuffle items\\n                    if ($randomize) {\\n                        shuffle($items);\\n                    }\\n                }\\n\\n                $tempitems = array();\\n                foreach ($items as $item) {\\n                    if (empty($item[\'activedate\'])) {\\n                        $item[\'activedate\'] = strftime(\'%Y\\/%m\\/%d\', $nextdate);\\n                        $nextdate = $nextdate + (24 * 60 * 60);\\n                        if ($item[\'activedate\'] == $activedate) {\\n                            $item[\'activated\'] = \'1\';\\n                            $activeitems[] = $item;\\n                        }\\n                    }\\n\\n                    $tempitems[] = $item;\\n                }\\n\\n                $items = $tempitems;\\n            }\\n\\n            \\/\\/$resource = $modx->getObject(\'modResource\', $docid);\\n            \\/\\/echo $modx->toJson($items);\\n            $sort = \'[{\\"sortby\\":\\"activedate\\"}]\';\\n            $items = $migx->sortDbResult($items, $modx->fromJson($sort));\\n\\n            \\/\\/echo \'<pre>\' . print_r($items, 1) . \'<\\/pre>\';\\n\\n            $tv->setValue($docid, $modx->toJson($items));\\n            $tv->save();\\n\\n        }\\n    }\\n\\n}\\n\\n\\n$properties = array();\\nforeach ($scriptProperties as $property => $value) {\\n    $properties[\'property.\' . $property] = $value;\\n}\\n\\n$output = \'\';\\n\\nforeach ($activeitems as $key => $item) {\\n\\n    $fields = array();\\n    foreach ($item as $field => $value) {\\n        $value = is_array($value) ? implode(\'||\', $value) : $value; \\/\\/handle arrays (checkboxes, multiselects)\\n        if ($processTVs && isset($inputTvs[$field])) {\\n            if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $inputTvs[$field][\'inputTV\']))) {\\n\\n            } else {\\n                $tv = $modx->newObject(\'modTemplateVar\');\\n                $tv->set(\'type\', $inputTvs[$field][\'inputTVtype\']);\\n            }\\n            $inputTV = $inputTvs[$field];\\n\\n            $mTypes = $modx->getOption(\'manipulatable_url_tv_output_types\', null, \'image,file\');\\n            \\/\\/don\'t manipulate any urls here\\n            $modx->setOption(\'manipulatable_url_tv_output_types\', \'\');\\n            $tv->set(\'default_text\', $value);\\n            $value = $tv->renderOutput($docid);\\n            \\/\\/set option back\\n            $modx->setOption(\'manipulatable_url_tv_output_types\', $mTypes);\\n            \\/\\/now manipulate urls\\n            if ($mediasource = $migx->getFieldSource($inputTV, $tv)) {\\n                $mTypes = explode(\',\', $mTypes);\\n                if (!empty($value) && in_array($tv->get(\'type\'), $mTypes)) {\\n                    \\/\\/$value = $mediasource->prepareOutputUrl($value);\\n                    $value = str_replace(\'\\/.\\/\', \'\\/\', $mediasource->prepareOutputUrl($value));\\n                }\\n            }\\n\\n        }\\n        $fields[$field] = $value;\\n\\n    }\\n\\n    $rowtpl = $tpl;\\n    \\/\\/get changing tpls from field\\n    if (substr($tpl, 0, 7) == \\"@FIELD:\\") {\\n        $tplField = substr($tpl, 7);\\n        $rowtpl = $fields[$tplField];\\n    }\\n\\n    if (!isset($template[$rowtpl])) {\\n        if (substr($rowtpl, 0, 6) == \\"@FILE:\\") {\\n            $template[$rowtpl] = file_get_contents($modx->config[\'base_path\'] . substr($rowtpl, 6));\\n        } elseif (substr($rowtpl, 0, 6) == \\"@CODE:\\") {\\n            $template[$rowtpl] = substr($tpl, 6);\\n        } elseif ($chunk = $modx->getObject(\'modChunk\', array(\'name\' => $rowtpl), true)) {\\n            $template[$rowtpl] = $chunk->getContent();\\n        } else {\\n            $template[$rowtpl] = false;\\n        }\\n    }\\n\\n    $fields = array_merge($fields, $properties);\\n\\n    if ($template[$rowtpl]) {\\n        $chunk = $modx->newObject(\'modChunk\');\\n        $chunk->setCacheable(false);\\n        $chunk->setContent($template[$rowtpl]);\\n        $output .= $chunk->process($fields);\\n\\n    } else {\\n        $output .= \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n\\n    }\\n\\n\\n}\\n\\n\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $output);\\n    return \'\';\\n}\\n\\nreturn $output;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * getDayliMIGXrecord\\n *\\n * Copyright 2009-2011 by Bruno Perner <b.perner@gmx.de>\\n *\\n * getDayliMIGXrecord is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * getDayliMIGXrecord is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * getDayliMIGXrecord; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package migx\\n *\\/\\n\\/**\\n * getDayliMIGXrecord\\n *\\n * display Items from outputvalue of TV with custom-TV-input-type MIGX or from other JSON-string for MODx Revolution \\n *\\n * @version 1.0\\n * @author Bruno Perner <b.perner@gmx.de>\\n * @copyright Copyright &copy; 2012\\n * @license http:\\/\\/www.gnu.org\\/licenses\\/old-licenses\\/gpl-2.0.html GNU General Public License\\n * version 2 or (at your option) any later version.\\n * @package migx\\n *\\/\\n\\n\\/*example: [[!getDayliMIGXrecord? &tvname=`myTV`&tpl=`@CODE:<img src=\\"[[+image]]\\"\\/>` &randomize=`1`]]*\\/\\n\\/* get default properties *\\/\\n\\n\\n$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'\');\\n$randomize = $modx->getOption(\'randomize\', $scriptProperties, false);\\n$where = $modx->getOption(\'where\', $scriptProperties, \'\');\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\n$sort = $modx->getOption(\'sort\', $scriptProperties, \'\');\\n$sort = !empty($sort) ? $modx->fromJSON($sort) : array();\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, false);\\n$docid = $modx->getOption(\'docid\', $scriptProperties, (isset($modx->resource) ? $modx->resource->get(\'id\') : 1));\\n$processTVs = $modx->getOption(\'processTVs\', $scriptProperties, \'1\');\\n\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\nif (!($migx instanceof Migx))\\n    return \'\';\\n$migx->working_context = $modx->resource->get(\'context_key\');\\n\\nif (!empty($tvname)) {\\n    if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $tvname))) {\\n\\n        \\/*\\n        *   get inputProperties\\n        *\\/\\n\\n\\n        $properties = $tv->get(\'input_properties\');\\n        $properties = isset($properties[\'formtabs\']) ? $properties : $tv->getProperties();\\n\\n        $migx->config[\'configs\'] = $properties[\'configs\'];\\n        $migx->loadConfigs();\\n        \\/\\/ get tabs from file or migx-config-table\\n        $formtabs = $migx->getTabs();\\n        if (empty($formtabs)) {\\n            \\/\\/try to get formtabs and its fields from properties\\n            $formtabs = $modx->fromJSON($properties[\'formtabs\']);\\n        }\\n\\n        \\/\\/$tv->setCacheable(false);\\n        \\/\\/$outputvalue = $tv->renderOutput($docid);\\n        \\n        $tvresource = $modx->getObject(\'modTemplateVarResource\', array(\\n            \'tmplvarid\' => $tv->get(\'id\'),\\n            \'contentid\' => $docid,\\n            ));\\n\\n\\n        $outputvalue = $tvresource->get(\'value\');\\n        \\n        \\/*\\n        *   get inputTvs \\n        *\\/\\n        $inputTvs = array();\\n        if (is_array($formtabs)) {\\n\\n            \\/\\/multiple different Forms\\n            \\/\\/ Note: use same field-names and inputTVs in all forms\\n            $inputTvs = $migx->extractInputTvs($formtabs);\\n        }\\n        $migx->source = $tv->getSource($migx->working_context, false);\\n\\n        if (empty($outputvalue)) {\\n            return \'\';\\n        }\\n\\n        $items = $modx->fromJSON($outputvalue);\\n\\n\\n        \\/\\/is there an active item for the current date?\\n        $activedate = $modx->getOption(\'activedate\', $scriptProperties, strftime(\'%Y\\/%m\\/%d\'));\\n        \\/\\/$activedate = $modx->getOption(\'activedate\', $_GET, strftime(\'%Y\\/%m\\/%d\'));\\n        $activewhere = array();\\n        $activewhere[\'activedate\'] = $activedate;\\n        $activewhere[\'activated\'] = \'1\';\\n        $activeitems = $migx->filterItems($activewhere, $items);\\n\\n        if (count($activeitems) == 0) {\\n\\n            $activeitems = array();\\n            \\/\\/ where filter\\n            if (is_array($where) && count($where) > 0) {\\n                $items = $migx->filterItems($where, $items);\\n            }\\n\\n            $tempitems = array();\\n            $count = count($items);\\n            $emptycount = 0;\\n            $latestdate = $activedate;\\n            $nextdate = strtotime($latestdate);\\n            foreach ($items as $item) {\\n                \\/\\/empty all dates and active-states which are older than today\\n                if (!empty($item[\'activedate\']) && $item[\'activedate\'] < $activedate) {\\n                    $item[\'activated\'] = \'0\';\\n                    $item[\'activedate\'] = \'\';\\n                }\\n                if (empty($item[\'activedate\'])) {\\n                    $emptycount++;\\n                }\\n                if ($item[\'activedate\'] > $latestdate) {\\n                    $latestdate = $item[\'activedate\'];\\n                    $nextdate = strtotime($latestdate) + (24 * 60 * 60);\\n                }\\n                if ($item[\'activedate\'] == $activedate) {\\n                    $item[\'activated\'] = \'1\';\\n                    $activeitems[] = $item;\\n                }\\n                $tempitems[] = $item;\\n            }\\n\\n            \\/\\/echo \'<pre>\' . print_r($tempitems, 1) . \'<\\/pre>\';\\n\\n            $items = $tempitems;\\n\\n\\n            \\/\\/are there more than half of all items with empty activedates\\n\\n            if ($emptycount >= $count \\/ 2) {\\n\\n                \\/\\/ sort items\\n                if (is_array($sort) && count($sort) > 0) {\\n                    $items = $migx->sortDbResult($items, $sort);\\n                }\\n                if (count($items) > 0) {\\n                    \\/\\/shuffle items\\n                    if ($randomize) {\\n                        shuffle($items);\\n                    }\\n                }\\n\\n                $tempitems = array();\\n                foreach ($items as $item) {\\n                    if (empty($item[\'activedate\'])) {\\n                        $item[\'activedate\'] = strftime(\'%Y\\/%m\\/%d\', $nextdate);\\n                        $nextdate = $nextdate + (24 * 60 * 60);\\n                        if ($item[\'activedate\'] == $activedate) {\\n                            $item[\'activated\'] = \'1\';\\n                            $activeitems[] = $item;\\n                        }\\n                    }\\n\\n                    $tempitems[] = $item;\\n                }\\n\\n                $items = $tempitems;\\n            }\\n\\n            \\/\\/$resource = $modx->getObject(\'modResource\', $docid);\\n            \\/\\/echo $modx->toJson($items);\\n            $sort = \'[{\\"sortby\\":\\"activedate\\"}]\';\\n            $items = $migx->sortDbResult($items, $modx->fromJson($sort));\\n\\n            \\/\\/echo \'<pre>\' . print_r($items, 1) . \'<\\/pre>\';\\n\\n            $tv->setValue($docid, $modx->toJson($items));\\n            $tv->save();\\n\\n        }\\n    }\\n\\n}\\n\\n\\n$properties = array();\\nforeach ($scriptProperties as $property => $value) {\\n    $properties[\'property.\' . $property] = $value;\\n}\\n\\n$output = \'\';\\n\\nforeach ($activeitems as $key => $item) {\\n\\n    $fields = array();\\n    foreach ($item as $field => $value) {\\n        $value = is_array($value) ? implode(\'||\', $value) : $value; \\/\\/handle arrays (checkboxes, multiselects)\\n        if ($processTVs && isset($inputTvs[$field])) {\\n            if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $inputTvs[$field][\'inputTV\']))) {\\n\\n            } else {\\n                $tv = $modx->newObject(\'modTemplateVar\');\\n                $tv->set(\'type\', $inputTvs[$field][\'inputTVtype\']);\\n            }\\n            $inputTV = $inputTvs[$field];\\n\\n            $mTypes = $modx->getOption(\'manipulatable_url_tv_output_types\', null, \'image,file\');\\n            \\/\\/don\'t manipulate any urls here\\n            $modx->setOption(\'manipulatable_url_tv_output_types\', \'\');\\n            $tv->set(\'default_text\', $value);\\n            $value = $tv->renderOutput($docid);\\n            \\/\\/set option back\\n            $modx->setOption(\'manipulatable_url_tv_output_types\', $mTypes);\\n            \\/\\/now manipulate urls\\n            if ($mediasource = $migx->getFieldSource($inputTV, $tv)) {\\n                $mTypes = explode(\',\', $mTypes);\\n                if (!empty($value) && in_array($tv->get(\'type\'), $mTypes)) {\\n                    \\/\\/$value = $mediasource->prepareOutputUrl($value);\\n                    $value = str_replace(\'\\/.\\/\', \'\\/\', $mediasource->prepareOutputUrl($value));\\n                }\\n            }\\n\\n        }\\n        $fields[$field] = $value;\\n\\n    }\\n\\n    $rowtpl = $tpl;\\n    \\/\\/get changing tpls from field\\n    if (substr($tpl, 0, 7) == \\"@FIELD:\\") {\\n        $tplField = substr($tpl, 7);\\n        $rowtpl = $fields[$tplField];\\n    }\\n\\n    if (!isset($template[$rowtpl])) {\\n        if (substr($rowtpl, 0, 6) == \\"@FILE:\\") {\\n            $template[$rowtpl] = file_get_contents($modx->config[\'base_path\'] . substr($rowtpl, 6));\\n        } elseif (substr($rowtpl, 0, 6) == \\"@CODE:\\") {\\n            $template[$rowtpl] = substr($tpl, 6);\\n        } elseif ($chunk = $modx->getObject(\'modChunk\', array(\'name\' => $rowtpl), true)) {\\n            $template[$rowtpl] = $chunk->getContent();\\n        } else {\\n            $template[$rowtpl] = false;\\n        }\\n    }\\n\\n    $fields = array_merge($fields, $properties);\\n\\n    if ($template[$rowtpl]) {\\n        $chunk = $modx->newObject(\'modChunk\');\\n        $chunk->setCacheable(false);\\n        $chunk->setContent($template[$rowtpl]);\\n        $output .= $chunk->process($fields);\\n\\n    } else {\\n        $output .= \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n\\n    }\\n\\n\\n}\\n\\n\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $output);\\n    return \'\';\\n}\\n\\nreturn $output;"}',
        'guid' => 'c67cde3f6c11fa80d0fb0739ddc5e81a',
        'native_key' => NULL,
        'signature' => 'a07dac2db72bc26093e06f178630f9dd',
      ),
      'a6637541e0bb6b473178e928db176830' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"filterbytag","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"if (!is_array($subject)) {\\n    $subject = explode(\',\',str_replace(array(\'||\',\' \'),array(\',\',\'\'),$subject));\\n}\\n\\nreturn (in_array($operand,$subject));","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"if (!is_array($subject)) {\\n    $subject = explode(\',\',str_replace(array(\'||\',\' \'),array(\',\',\'\'),$subject));\\n}\\n\\nreturn (in_array($operand,$subject));"}',
        'guid' => '25470f51820238217ccbde43f58dd5e1',
        'native_key' => NULL,
        'signature' => '0d6bd855773f14b39acef22dda6c8d41',
      ),
      'efb2210c21bcb2d205a08bee59fd8716' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"migxObjectMediaPath","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"$pathTpl = $modx->getOption(\'pathTpl\', $scriptProperties, \'\');\\n$objectid = $modx->getOption(\'objectid\', $scriptProperties, \'\');\\n$createfolder = $modx->getOption(\'createFolder\', $scriptProperties, \'1\');\\n$path = \'\';\\n$createpath = false;\\nif (empty($objectid) && $modx->getPlaceholder(\'objectid\')) {\\n    \\/\\/ placeholder was set by some script on frontend for example\\n    $objectid = $modx->getPlaceholder(\'objectid\');\\n}\\nif (empty($objectid) && isset($_REQUEST[\'object_id\'])) {\\n    $objectid = $_REQUEST[\'object_id\'];\\n}\\n\\n\\n\\nif (empty($objectid)) {\\n\\n    \\/\\/set Session - var in fields.php - processor\\n    if (isset($_SESSION[\'migxWorkingObjectid\'])) {\\n        $objectid = $_SESSION[\'migxWorkingObjectid\'];\\n        $createpath = !empty($createfolder);\\n    }\\n\\n}\\n\\n\\n$path = str_replace(\'{id}\', $objectid, $pathTpl);\\n\\n$fullpath = $modx->getOption(\'base_path\') . $path;\\n\\nif ($createpath && !file_exists($fullpath)) {\\n        $permissions = octdec(\'0\' . (int)($modx->getOption(\'new_folder_permissions\', null, \'755\', true)));\\n        if (!@mkdir($fullpath, $permissions, true)) {\\n            $modx->log(MODX_LOG_LEVEL_ERROR, sprintf(\'[migxResourceMediaPath]: could not create directory %s).\', $fullpath));\\n        }\\n        else{\\n            chmod($fullpath, $permissions); \\n        }\\n}\\n\\nreturn $path;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"$pathTpl = $modx->getOption(\'pathTpl\', $scriptProperties, \'\');\\n$objectid = $modx->getOption(\'objectid\', $scriptProperties, \'\');\\n$createfolder = $modx->getOption(\'createFolder\', $scriptProperties, \'1\');\\n$path = \'\';\\n$createpath = false;\\nif (empty($objectid) && $modx->getPlaceholder(\'objectid\')) {\\n    \\/\\/ placeholder was set by some script on frontend for example\\n    $objectid = $modx->getPlaceholder(\'objectid\');\\n}\\nif (empty($objectid) && isset($_REQUEST[\'object_id\'])) {\\n    $objectid = $_REQUEST[\'object_id\'];\\n}\\n\\n\\n\\nif (empty($objectid)) {\\n\\n    \\/\\/set Session - var in fields.php - processor\\n    if (isset($_SESSION[\'migxWorkingObjectid\'])) {\\n        $objectid = $_SESSION[\'migxWorkingObjectid\'];\\n        $createpath = !empty($createfolder);\\n    }\\n\\n}\\n\\n\\n$path = str_replace(\'{id}\', $objectid, $pathTpl);\\n\\n$fullpath = $modx->getOption(\'base_path\') . $path;\\n\\nif ($createpath && !file_exists($fullpath)) {\\n        $permissions = octdec(\'0\' . (int)($modx->getOption(\'new_folder_permissions\', null, \'755\', true)));\\n        if (!@mkdir($fullpath, $permissions, true)) {\\n            $modx->log(MODX_LOG_LEVEL_ERROR, sprintf(\'[migxResourceMediaPath]: could not create directory %s).\', $fullpath));\\n        }\\n        else{\\n            chmod($fullpath, $permissions); \\n        }\\n}\\n\\nreturn $path;"}',
        'guid' => 'd8785bb6953a8093c1189781c6d35df9',
        'native_key' => NULL,
        'signature' => '347f4b66650b300cf1268a79b8e90a11',
      ),
      'c022ec252a90dd22b92e4c825ef6fb97' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"exportMIGX2db","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * exportMIGX2db\\n *\\n * Copyright 2014 by Bruno Perner <b.perner@gmx.de>\\n * \\n * Sponsored by Simon Wurster <info@wurster-medien.de>\\n *\\n * exportMIGX2db is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * exportMIGX2db is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * exportMIGX2db; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package migx\\n *\\/\\n\\/**\\n * exportMIGX2db\\n *\\n * export Items from outputvalue of TV with custom-TV-input-type MIGX or from other JSON-string to db-table \\n *\\n * @version 1.0\\n * @author Bruno Perner <b.perner@gmx.de>\\n * @copyright Copyright &copy; 2014\\n * @license http:\\/\\/www.gnu.org\\/licenses\\/old-licenses\\/gpl-2.0.html GNU General Public License\\n * version 2 or (at your option) any later version.\\n * @package migx\\n *\\/\\n\\n\\/*\\n[[!exportMIGX2db? \\n&tvname=`references` \\n&resources=`25` \\n&packageName=`projekte`\\n&classname=`Projekt` \\n&migx_id_field=`migx_id` \\n&renamed_fields=`{\\"Firmen-URL\\":\\"Firmen_url\\",\\"Projekt-URL\\":\\"Projekt_URL\\",\\"main-image\\":\\"main_image\\"}`\\n]]\\n*\\/\\n\\n\\n$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\n$resources = $modx->getOption(\'resources\', $scriptProperties, (isset($modx->resource) ? $modx->resource->get(\'id\') : \'\'));\\n$resources = explode(\',\', $resources);\\n$prefix = isset($scriptProperties[\'prefix\']) ? $scriptProperties[\'prefix\'] : null;\\n$packageName = $modx->getOption(\'packageName\', $scriptProperties, \'\');\\n$classname = $modx->getOption(\'classname\', $scriptProperties, \'\');\\n$value = $modx->getOption(\'value\', $scriptProperties, \'\');\\n$migx_id_field = $modx->getOption(\'migx_id_field\', $scriptProperties, \'\');\\n$pos_field = $modx->getOption(\'pos_field\', $scriptProperties, \'\');\\n$renamed_fields = $modx->getOption(\'renamed_fields\', $scriptProperties, \'\');\\n\\n$packagepath = $modx->getOption(\'core_path\') . \'components\\/\' . $packageName .\\n    \'\\/\';\\n$modelpath = $packagepath . \'model\\/\';\\n\\n$modx->addPackage($packageName, $modelpath, $prefix);\\n$added = 0;\\n$modified = 0;\\n\\nforeach ($resources as $docid) {\\n    \\n    $outputvalue = \'\';\\n    if (count($resources)==1){\\n        $outputvalue = $value;    \\n    }\\n    \\n    if (!empty($tvname)) {\\n        if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $tvname))) {\\n\\n            $outputvalue = empty($outputvalue) ? $tv->renderOutput($docid) : $outputvalue;\\n        }\\n    }\\n\\n    if (!empty($outputvalue)) {\\n        $renamed = !empty($renamed_fields) ? $modx->fromJson($renamed_fields) : array();\\n\\n        $items = $modx->fromJSON($outputvalue);\\n        $pos = 1;\\n        $searchfields = array();\\n        if (is_array($items)) {\\n            foreach ($items as $fields) {\\n                $search = array();\\n                if (!empty($migx_id_field)) {\\n                    $search[$migx_id_field] = $fields[\'MIGX_id\'];\\n                }\\n                if (!empty($resource_id_field)) {\\n                    $search[$resource_id_field] = $docid;\\n                }\\n                if (!empty($migx_id_field) && $object = $modx->getObject($classname, $search)) {\\n                    $mode = \'mod\';\\n                } else {\\n                    $object = $modx->newObject($classname);\\n                    $object->fromArray($search);\\n                    $mode = \'add\';\\n                }\\n                foreach ($fields as $field => $value) {\\n                    $fieldname = array_key_exists($field, $renamed) ? $renamed[$field] : $field;\\n                    $object->set($fieldname, $value);\\n                }\\n                if (!empty($pos_field)) {\\n                    $object->set($pos_field,$pos) ;\\n                }                \\n                if ($object->save()) {\\n                    if ($mode == \'add\') {\\n                        $added++;\\n                    } else {\\n                        $modified++;\\n                    }\\n                }\\n                $pos++;\\n            }\\n            \\n        }\\n    }\\n}\\n\\n\\nreturn $added . \' rows added to db, \' . $modified . \' existing rows actualized\';","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * exportMIGX2db\\n *\\n * Copyright 2014 by Bruno Perner <b.perner@gmx.de>\\n * \\n * Sponsored by Simon Wurster <info@wurster-medien.de>\\n *\\n * exportMIGX2db is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * exportMIGX2db is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * exportMIGX2db; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package migx\\n *\\/\\n\\/**\\n * exportMIGX2db\\n *\\n * export Items from outputvalue of TV with custom-TV-input-type MIGX or from other JSON-string to db-table \\n *\\n * @version 1.0\\n * @author Bruno Perner <b.perner@gmx.de>\\n * @copyright Copyright &copy; 2014\\n * @license http:\\/\\/www.gnu.org\\/licenses\\/old-licenses\\/gpl-2.0.html GNU General Public License\\n * version 2 or (at your option) any later version.\\n * @package migx\\n *\\/\\n\\n\\/*\\n[[!exportMIGX2db? \\n&tvname=`references` \\n&resources=`25` \\n&packageName=`projekte`\\n&classname=`Projekt` \\n&migx_id_field=`migx_id` \\n&renamed_fields=`{\\"Firmen-URL\\":\\"Firmen_url\\",\\"Projekt-URL\\":\\"Projekt_URL\\",\\"main-image\\":\\"main_image\\"}`\\n]]\\n*\\/\\n\\n\\n$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\n$resources = $modx->getOption(\'resources\', $scriptProperties, (isset($modx->resource) ? $modx->resource->get(\'id\') : \'\'));\\n$resources = explode(\',\', $resources);\\n$prefix = isset($scriptProperties[\'prefix\']) ? $scriptProperties[\'prefix\'] : null;\\n$packageName = $modx->getOption(\'packageName\', $scriptProperties, \'\');\\n$classname = $modx->getOption(\'classname\', $scriptProperties, \'\');\\n$value = $modx->getOption(\'value\', $scriptProperties, \'\');\\n$migx_id_field = $modx->getOption(\'migx_id_field\', $scriptProperties, \'\');\\n$pos_field = $modx->getOption(\'pos_field\', $scriptProperties, \'\');\\n$renamed_fields = $modx->getOption(\'renamed_fields\', $scriptProperties, \'\');\\n\\n$packagepath = $modx->getOption(\'core_path\') . \'components\\/\' . $packageName .\\n    \'\\/\';\\n$modelpath = $packagepath . \'model\\/\';\\n\\n$modx->addPackage($packageName, $modelpath, $prefix);\\n$added = 0;\\n$modified = 0;\\n\\nforeach ($resources as $docid) {\\n    \\n    $outputvalue = \'\';\\n    if (count($resources)==1){\\n        $outputvalue = $value;    \\n    }\\n    \\n    if (!empty($tvname)) {\\n        if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $tvname))) {\\n\\n            $outputvalue = empty($outputvalue) ? $tv->renderOutput($docid) : $outputvalue;\\n        }\\n    }\\n\\n    if (!empty($outputvalue)) {\\n        $renamed = !empty($renamed_fields) ? $modx->fromJson($renamed_fields) : array();\\n\\n        $items = $modx->fromJSON($outputvalue);\\n        $pos = 1;\\n        $searchfields = array();\\n        if (is_array($items)) {\\n            foreach ($items as $fields) {\\n                $search = array();\\n                if (!empty($migx_id_field)) {\\n                    $search[$migx_id_field] = $fields[\'MIGX_id\'];\\n                }\\n                if (!empty($resource_id_field)) {\\n                    $search[$resource_id_field] = $docid;\\n                }\\n                if (!empty($migx_id_field) && $object = $modx->getObject($classname, $search)) {\\n                    $mode = \'mod\';\\n                } else {\\n                    $object = $modx->newObject($classname);\\n                    $object->fromArray($search);\\n                    $mode = \'add\';\\n                }\\n                foreach ($fields as $field => $value) {\\n                    $fieldname = array_key_exists($field, $renamed) ? $renamed[$field] : $field;\\n                    $object->set($fieldname, $value);\\n                }\\n                if (!empty($pos_field)) {\\n                    $object->set($pos_field,$pos) ;\\n                }                \\n                if ($object->save()) {\\n                    if ($mode == \'add\') {\\n                        $added++;\\n                    } else {\\n                        $modified++;\\n                    }\\n                }\\n                $pos++;\\n            }\\n            \\n        }\\n    }\\n}\\n\\n\\nreturn $added . \' rows added to db, \' . $modified . \' existing rows actualized\';"}',
        'guid' => 'af8d1a00fba084db981c3783234d4833',
        'native_key' => NULL,
        'signature' => '20d25e5c9403c20b3440daedac680101',
      ),
      '3a840387b44c06fb898cb511c46d5dc8' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"preparedatewhere","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"$name = $modx->getOption(\'name\', $scriptProperties, \'\');\\n$date = $modx->getOption($name . \'_date\', $_REQUEST, \'\');\\n$dir = str_replace(\'T\', \' \', $modx->getOption($name . \'_dir\', $_REQUEST, \'\'));\\n\\nif (!empty($date) && !empty($dir) && $dir != \'all\') {\\n    switch ($dir) {\\n        case \'=\':\\n            $where = array(\\n            \'enddate:>=\' => strftime(\'%Y-%m-%d 00:00:00\',strtotime($date)),\\n            \'startdate:<=\' => strftime(\'%Y-%m-%d 23:59:59\',strtotime($date))\\n            );\\n            break;\\n        case \'>=\':\\n            $where = array(\\n            \'enddate:>=\' => strftime(\'%Y-%m-%d 00:00:00\',strtotime($date))\\n            );\\n            break;\\n        case \'<=\':\\n            $where = array(\\n            \'startdate:<=\' => strftime(\'%Y-%m-%d 23:59:59\',strtotime($date))\\n            );            \\n            break;\\n\\n    }\\n\\n    return $modx->toJson($where);\\n}","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"$name = $modx->getOption(\'name\', $scriptProperties, \'\');\\n$date = $modx->getOption($name . \'_date\', $_REQUEST, \'\');\\n$dir = str_replace(\'T\', \' \', $modx->getOption($name . \'_dir\', $_REQUEST, \'\'));\\n\\nif (!empty($date) && !empty($dir) && $dir != \'all\') {\\n    switch ($dir) {\\n        case \'=\':\\n            $where = array(\\n            \'enddate:>=\' => strftime(\'%Y-%m-%d 00:00:00\',strtotime($date)),\\n            \'startdate:<=\' => strftime(\'%Y-%m-%d 23:59:59\',strtotime($date))\\n            );\\n            break;\\n        case \'>=\':\\n            $where = array(\\n            \'enddate:>=\' => strftime(\'%Y-%m-%d 00:00:00\',strtotime($date))\\n            );\\n            break;\\n        case \'<=\':\\n            $where = array(\\n            \'startdate:<=\' => strftime(\'%Y-%m-%d 23:59:59\',strtotime($date))\\n            );            \\n            break;\\n\\n    }\\n\\n    return $modx->toJson($where);\\n}"}',
        'guid' => '283256126c02f5d56e1f607e1eab8754',
        'native_key' => NULL,
        'signature' => 'd7c9c17ab54e3766e1facd6ce8b313da',
      ),
      '63ef4ff278c61b9a33cf12ff3147c4f1' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"migxJsonToPlaceholders","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"$value = $modx->getOption(\'value\',$scriptProperties,\'\');\\r\\n$prefix = $modx->getOption(\'prefix\',$scriptProperties,\'\');\\r\\n\\r\\n\\/\\/$modx->setPlaceholders($modx->fromJson($value),$prefix,\'\',true);\\r\\n\\r\\n$values = json_decode($value, true);\\r\\n\\r\\n$it = new RecursiveIteratorIterator(new RecursiveArrayIterator($values));\\r\\n\\r\\nif (is_array($values)){\\r\\n    foreach ($it as $key => $value){\\r\\n        $value = $value == null ? \'\' : $value;\\r\\n        $modx->setPlaceholder($prefix . $key, $value);\\r\\n    }\\r\\n}","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"$value = $modx->getOption(\'value\',$scriptProperties,\'\');\\r\\n$prefix = $modx->getOption(\'prefix\',$scriptProperties,\'\');\\r\\n\\r\\n\\/\\/$modx->setPlaceholders($modx->fromJson($value),$prefix,\'\',true);\\r\\n\\r\\n$values = json_decode($value, true);\\r\\n\\r\\n$it = new RecursiveIteratorIterator(new RecursiveArrayIterator($values));\\r\\n\\r\\nif (is_array($values)){\\r\\n    foreach ($it as $key => $value){\\r\\n        $value = $value == null ? \'\' : $value;\\r\\n        $modx->setPlaceholder($prefix . $key, $value);\\r\\n    }\\r\\n}"}',
        'guid' => 'd6705ae88be2c5161c8483c36e0c7b99',
        'native_key' => NULL,
        'signature' => '254589c989e68748559a05cb31c0b0d6',
      ),
      '992d0019ecdb1a661bb7b22318997646' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"migxGetCollectionTree","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * migxGetCollectionTree\\n *\\n * Copyright 2014 by Bruno Perner <b.perner@gmx.de>\\n *\\n * migxGetCollectionTree is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * migxGetCollectionTree is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * migxGetCollectionTree; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package migx\\n *\\/\\n\\/**\\n * migxGetCollectionTree\\n *\\n *          display nested items from different objects. The tree-schema is defined by a json-property. \\n *\\n * @version 1.0.0\\n * @author Bruno Perner <b.perner@gmx.de>\\n * @copyright Copyright &copy; 2014\\n * @license http:\\/\\/www.gnu.org\\/licenses\\/old-licenses\\/gpl-2.0.html GNU General Public License\\n * version 2 or (at your option) any later version.\\n * @package migx\\n *\\/\\n\\n$treeSchema = $modx->getOption(\'treeSchema\', $scriptProperties, \'\');\\n$treeSchema = $modx->fromJson($treeSchema);\\n\\n$scriptProperties[\'current\'] = $modx->getOption(\'current\', $scriptProperties, \'\');\\n$scriptProperties[\'currentClassname\'] = $modx->getOption(\'currentClassname\', $scriptProperties, \'\');\\n$scriptProperties[\'currentKeyField\'] = $modx->getOption(\'currentKeyField\', $scriptProperties, \'id\');\\n$return = $modx->getOption(\'return\', $scriptProperties, \'parsed\'); \\/\\/parsed,json,arrayprint\\n\\n\\/*\\nExamples:\\n\\nGet Resource-Tree, 4 levels deep\\n\\n[[!migxGetCollectionTree?\\n&current=`57`\\n&currentClassname=`modResource`\\n&treeSchema=`\\n{\\n\\"classname\\": \\"modResource\\",\\n\\"debug\\": \\"1\\",\\n\\"tpl\\": \\"mgctResourceTree\\",\\n\\"wrapperTpl\\": \\"@CODE:<ul>[[+output]]<\\/ul>\\",\\n\\"selectfields\\": \\"id,pagetitle\\",\\n\\"where\\": {\\n\\"parent\\": \\"0\\",\\n\\"published\\": \\"1\\",\\n\\"deleted\\": \\"0\\"\\n},\\n\\"_branches\\": [{\\n\\"alias\\": \\"children\\",\\n\\"classname\\": \\"modResource\\",\\n\\"local\\": \\"parent\\",\\n\\"foreign\\": \\"id\\",\\n\\"tpl\\": \\"mgctResourceTree\\",\\n\\"debug\\": \\"1\\",\\n\\"selectfields\\": \\"id,pagetitle,parent\\",\\n\\"_branches\\": [{\\n\\"alias\\": \\"children\\",\\n\\"classname\\": \\"modResource\\",\\n\\"local\\": \\"parent\\",\\n\\"foreign\\": \\"id\\",\\n\\"tpl\\": \\"mgctResourceTree\\",\\n\\"debug\\": \\"1\\",\\n\\"selectfields\\": \\"id,pagetitle,parent\\",\\n\\"where\\": {\\n\\"published\\": \\"1\\",\\n\\"deleted\\": \\"0\\"\\n},\\n\\"_branches\\": [{\\n\\"alias\\": \\"children\\",\\n\\"classname\\": \\"modResource\\",\\n\\"local\\": \\"parent\\",\\n\\"foreign\\": \\"id\\",\\n\\"tpl\\": \\"mgctResourceTree\\",\\n\\"debug\\": \\"1\\",\\n\\"selectfields\\": \\"id,pagetitle,parent\\",\\n\\"where\\": {\\n\\"published\\": \\"1\\",\\n\\"deleted\\": \\"0\\"\\n}\\n}]\\n}]\\n}]\\n}\\n`]]\\n\\nthe chunk mgctResourceTree:\\n<li class=\\"[[+_activelabel]] [[+_currentlabel]]\\" ><a href=\\"[[~[[+id]]]]\\">[[+pagetitle]]([[+id]])<\\/a><\\/li>\\n[[+innercounts.children:gt=`0`:then=`\\n<ul>[[+innerrows.children]]<\\/ul>\\n`:else=``]]\\n\\nget all Templates and its Resources:\\n\\n[[!migxGetCollectionTree?\\n&treeSchema=`\\n{\\n\\"classname\\": \\"modTemplate\\",\\n\\"debug\\": \\"1\\",\\n\\"tpl\\": \\"@CODE:<h3>[[+templatename]]<\\/h3><ul>[[+innerrows.resource]]<\\/ul>\\",\\n\\"selectfields\\": \\"id,templatename\\",\\n\\"_branches\\": [{\\n\\"alias\\": \\"resource\\",\\n\\"classname\\": \\"modResource\\",\\n\\"local\\": \\"template\\",\\n\\"foreign\\": \\"id\\",\\n\\"tpl\\": \\"@CODE:<li>[[+pagetitle]]([[+id]])<\\/li>\\",\\n\\"debug\\": \\"1\\",\\n\\"selectfields\\": \\"id,pagetitle,template\\"\\n}]\\n}\\n`]]\\n*\\/\\n\\nif (!class_exists(\'MigxGetCollectionTree\')) {\\n    class MigxGetCollectionTree\\n    {\\n        function __construct(modX & $modx, array $config = array())\\n        {\\n            $this->modx = &$modx;\\n            $this->config = $config;\\n        }\\n\\n        function getBranch($branch, $foreigns = array(), $level = 1)\\n        {\\n\\n            $rows = array();\\n\\n            if (count($foreigns) > 0) {\\n                $modx = &$this->modx;\\n\\n                $local = $modx->getOption(\'local\', $branch, \'\');\\n                $where = $modx->getOption(\'where\', $branch, array());\\n                $where = !empty($where) && !is_array($where) ? $modx->fromJSON($where) : $where;\\n                $where[] = array($local . \':IN\' => $foreigns);\\n\\n                $branch[\'where\'] = $modx->toJson($where);\\n\\n                $level++;\\n                \\/*\\n                if ($levelFromCurrent > 0){\\n                $levelFromCurrent++;    \\n                }\\n                *\\/\\n\\n                $rows = $this->getRows($branch, $level);\\n            }\\n\\n            return $rows;\\n        }\\n\\n        function getRows($scriptProperties, $level)\\n        {\\n            $migx = &$this->migx;\\n            $modx = &$this->modx;\\n\\n            $current = $modx->getOption(\'current\', $this->config, \'\');\\n            $currentKeyField = $modx->getOption(\'currentKeyField\', $this->config, \'id\');\\n            $currentlabel = $modx->getOption(\'currentlabel\', $this->config, \'current\');\\n            $classname = $modx->getOption(\'classname\', $scriptProperties, \'\');\\n\\t\\t\\t$sortResult = $modx->getOption(\'sortResult\', $scriptProperties, \'\');\\n            $currentClassname = !empty($this->config[\'currentClassname\']) ? $this->config[\'currentClassname\'] : $classname;\\n\\n            $activelabel = $modx->getOption(\'activelabel\', $this->config, \'active\');\\n            $return = $modx->getOption(\'return\', $this->config, \'parsed\');\\n\\n            $xpdo = $migx->getXpdoInstanceAndAddPackage($scriptProperties);\\n            $c = $migx->prepareQuery($xpdo, $scriptProperties);\\n            $rows = $migx->getCollection($c);\\n\\n            $branches = $modx->getOption(\'_branches\', $scriptProperties, array());\\n\\n            $collectedSubrows = array();\\n            foreach ($branches as $branch) {\\n                $foreign = $modx->getOption(\'foreign\', $branch, \'\');\\n                $local = $modx->getOption(\'local\', $branch, \'\');\\n                $alias = $modx->getOption(\'alias\', $branch, \'\');\\n                \\/\\/$activeonly = $modx->getOption(\'activeonly\', $branch, \'\');\\n                $foreigns = array();\\n                foreach ($rows as $row) {\\n                    $foreigns[] = $row[$foreign];\\n                }\\n\\n                $subrows = $this->getBranch($branch, $foreigns, $level);\\n                foreach ($subrows as $subrow) {\\n\\n                    $collectedSubrows[$subrow[$local]][] = $subrow;\\n                    $subrow[\'_active\'] = $modx->getOption(\'_active\', $subrow, \'0\');\\n                    \\/*\\n                    if (!empty($activeonly) && $subrow[\'_active\'] != \'1\') {\\n                    $output = \'\';\\n                    } else {\\n                    $collectedSubrows[$subrow[$local]][] = $subrow;\\n                    }\\n                    *\\/\\n                    if ($subrow[\'_active\'] == \'1\') {\\n                        \\/\\/echo \'active subrow:<pre>\' . print_r($subrow,1) . \'<\\/pre>\';\\n                        $activesubrow[$subrow[$local]] = true;\\n                    }\\n                    if ($subrow[\'_current\'] == \'1\') {\\n                        \\/\\/echo \'active subrow:<pre>\' . print_r($subrow,1) . \'<\\/pre>\';\\n                        $currentsubrow[$subrow[$local]] = true;\\n                    }\\n\\n\\n                }\\n                \\/\\/insert subrows\\n                $temprows = $rows;\\n                $rows = array();\\n                foreach ($temprows as $row) {\\n                    if (isset($collectedSubrows[$row[$foreign]])) {\\n                        $row[\'_active\'] = \'0\';\\n                        $row[\'_currentparent\'] = \'0\';\\n                        if (isset($activesubrow[$row[$foreign]]) && $activesubrow[$row[$foreign]]) {\\n                            $row[\'_active\'] = \'1\';\\n                            \\/\\/echo \'active row:<pre>\' . print_r($row,1) . \'<\\/pre>\';\\n                        }\\n                        if (isset($currentsubrow[$row[$foreign]]) && $currentsubrow[$row[$foreign]]) {\\n                            $row[\'_currentparent\'] = \'1\';\\n                            \\/\\/echo \'active row:<pre>\' . print_r($row,1) . \'<\\/pre>\';\\n                        }\\n\\n                        \\/\\/render innerrows\\n                        \\/\\/$output = $migx->renderOutput($collectedSubrows[$row[$foreign]],$scriptProperties);\\n                        \\/\\/$output = $collectedSubrows[$row[$foreign]];\\n\\n                        $row[\'innercounts.\' . $alias] = count($collectedSubrows[$row[$foreign]]);\\n                        $row[\'_scriptProperties\'][$alias] = $branch;\\n                        \\/*\\n                        switch ($return) {\\n                        case \'parsed\':\\n                        $output = $migx->renderOutput($collectedSubrows[$row[$foreign]], $branch);\\n                        \\/\\/$subbranches = $modx->getOption(\'_branches\', $branch, array());\\n                        \\/\\/if there are any placeholders left with the same alias from subbranch, remove them\\n                        $output = str_replace(\'[[+innerrows.\' . $alias . \']]\', \'\', $output);\\n                        break;\\n                        case \'json\':\\n                        case \'arrayprint\':\\n                        $output = $collectedSubrows[$row[$foreign]];\\n                        break;\\n                        }\\n                        *\\/\\n                        $output = $collectedSubrows[$row[$foreign]];\\n\\n                        $row[\'innerrows.\' . $alias] = $output;\\n\\n                    }\\n                    $rows[] = $row;\\n                }\\n\\n            }\\n\\n            $temprows = $rows;\\n            $rows = array();\\n            foreach ($temprows as $row) {\\n                \\/\\/add additional placeholders\\n                $row[\'_level\'] = $level;\\n                $row[\'_active\'] = $modx->getOption(\'_active\', $row, \'0\');\\n                if ($currentClassname == $classname && $row[$currentKeyField] == $current) {\\n                    $row[\'_current\'] = \'1\';\\n                    $row[\'_currentlabel\'] = $currentlabel;\\n                    $row[\'_active\'] = \'1\';\\n                } else {\\n                    $row[\'_current\'] = \'0\';\\n                    $row[\'_currentlabel\'] = \'\';\\n                }\\n                if ($row[\'_active\'] == \'1\') {\\n                    $row[\'_activelabel\'] = $activelabel;\\n                } else {\\n                    $row[\'_activelabel\'] = \'\';\\n                }\\n                $rows[] = $row;\\n            }\\n\\n            if (!empty($sortResult) && is_array($sortResult)){\\n                $rows = $migx->sortDbResult($rows, $sortResult);\\n\\t\\t\\t}\\n\\n            return $rows;\\n        }\\n\\n        function renderRow($row, $levelFromCurrent = 0)\\n        {\\n            $migx = &$this->migx;\\n            $modx = &$this->modx;\\n            $return = $modx->getOption(\'return\', $this->config, \'parsed\');\\n            $branchProperties = $modx->getOption(\'_scriptProperties\', $row, array());\\n            $current = $modx->getOption(\'_current\', $row, \'0\');\\n            $currentparent = $modx->getOption(\'_currentparent\', $row, \'0\');\\n            $levelFromCurrent = $current == \'1\' ? 1 : $levelFromCurrent;\\n            $row[\'_levelFromCurrent\'] = $levelFromCurrent;\\n            foreach ($branchProperties as $alias => $properties) {\\n                $innerrows = $modx->getOption(\'innerrows.\' . $alias, $row, array());\\n                $subrows = $this->renderRows($innerrows, $properties, $levelFromCurrent, $currentparent);\\n                if ($return == \'parsed\') {\\n                    $subrows = $migx->renderOutput($subrows, $properties);\\n                }\\n                $row[\'innerrows.\' . $alias] = $subrows;\\n            }\\n\\n            return $row;\\n        }\\n\\n        function renderRows($rows, $scriptProperties, $levelFromCurrent = 0, $siblingOfCurrent = \'0\')\\n        {\\n\\n            $modx = &$this->modx;\\n            $temprows = $rows;\\n            $rows = array();\\n            if ($levelFromCurrent > 0) {\\n                $levelFromCurrent++;\\n            }\\n            foreach ($temprows as $row) {\\n                $row[\'_siblingOfCurrent\'] = $siblingOfCurrent;\\n                $row = $this->renderRow($row, $levelFromCurrent);\\n                $rows[] = $row;\\n            }\\n            return $rows;\\n        }\\n    }\\n}\\n\\n$instance = new MigxGetCollectionTree($modx, $scriptProperties);\\n\\nif (is_array($treeSchema)) {\\n    $scriptProperties = $treeSchema;\\n\\n    $migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\n    if (!($migx instanceof Migx))\\n        return \'\';\\n\\n    $defaultcontext = \'web\';\\n    $migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : $defaultcontext;\\n    $instance->migx = &$migx;\\n\\n    $level = 1;\\n    $scriptProperties[\'alias\'] = \'row\';\\n    $rows = $instance->getRows($scriptProperties, $level);\\n\\n    $row = array();\\n    $row[\'innercounts.row\'] = count($rows);\\n    $row[\'innerrows.row\'] = $rows;\\n    $row[\'_scriptProperties\'][\'row\'] = $scriptProperties;\\n\\n    $rows = $instance->renderRow($row);\\n\\n    $output = \'\';\\n    switch ($return) {\\n        case \'parsed\':\\n            $output = $modx->getOption(\'innerrows.row\', $rows, \'\');\\n            break;\\n        case \'json\':\\n            $output = $modx->toJson($rows);\\n            break;\\n        case \'arrayprint\':\\n            $output = \'<pre>\' . print_r($rows, 1) . \'<\\/pre>\';\\n            break;\\n    }\\n\\n    return $output;\\n\\n}","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * migxGetCollectionTree\\n *\\n * Copyright 2014 by Bruno Perner <b.perner@gmx.de>\\n *\\n * migxGetCollectionTree is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * migxGetCollectionTree is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * migxGetCollectionTree; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package migx\\n *\\/\\n\\/**\\n * migxGetCollectionTree\\n *\\n *          display nested items from different objects. The tree-schema is defined by a json-property. \\n *\\n * @version 1.0.0\\n * @author Bruno Perner <b.perner@gmx.de>\\n * @copyright Copyright &copy; 2014\\n * @license http:\\/\\/www.gnu.org\\/licenses\\/old-licenses\\/gpl-2.0.html GNU General Public License\\n * version 2 or (at your option) any later version.\\n * @package migx\\n *\\/\\n\\n$treeSchema = $modx->getOption(\'treeSchema\', $scriptProperties, \'\');\\n$treeSchema = $modx->fromJson($treeSchema);\\n\\n$scriptProperties[\'current\'] = $modx->getOption(\'current\', $scriptProperties, \'\');\\n$scriptProperties[\'currentClassname\'] = $modx->getOption(\'currentClassname\', $scriptProperties, \'\');\\n$scriptProperties[\'currentKeyField\'] = $modx->getOption(\'currentKeyField\', $scriptProperties, \'id\');\\n$return = $modx->getOption(\'return\', $scriptProperties, \'parsed\'); \\/\\/parsed,json,arrayprint\\n\\n\\/*\\nExamples:\\n\\nGet Resource-Tree, 4 levels deep\\n\\n[[!migxGetCollectionTree?\\n&current=`57`\\n&currentClassname=`modResource`\\n&treeSchema=`\\n{\\n\\"classname\\": \\"modResource\\",\\n\\"debug\\": \\"1\\",\\n\\"tpl\\": \\"mgctResourceTree\\",\\n\\"wrapperTpl\\": \\"@CODE:<ul>[[+output]]<\\/ul>\\",\\n\\"selectfields\\": \\"id,pagetitle\\",\\n\\"where\\": {\\n\\"parent\\": \\"0\\",\\n\\"published\\": \\"1\\",\\n\\"deleted\\": \\"0\\"\\n},\\n\\"_branches\\": [{\\n\\"alias\\": \\"children\\",\\n\\"classname\\": \\"modResource\\",\\n\\"local\\": \\"parent\\",\\n\\"foreign\\": \\"id\\",\\n\\"tpl\\": \\"mgctResourceTree\\",\\n\\"debug\\": \\"1\\",\\n\\"selectfields\\": \\"id,pagetitle,parent\\",\\n\\"_branches\\": [{\\n\\"alias\\": \\"children\\",\\n\\"classname\\": \\"modResource\\",\\n\\"local\\": \\"parent\\",\\n\\"foreign\\": \\"id\\",\\n\\"tpl\\": \\"mgctResourceTree\\",\\n\\"debug\\": \\"1\\",\\n\\"selectfields\\": \\"id,pagetitle,parent\\",\\n\\"where\\": {\\n\\"published\\": \\"1\\",\\n\\"deleted\\": \\"0\\"\\n},\\n\\"_branches\\": [{\\n\\"alias\\": \\"children\\",\\n\\"classname\\": \\"modResource\\",\\n\\"local\\": \\"parent\\",\\n\\"foreign\\": \\"id\\",\\n\\"tpl\\": \\"mgctResourceTree\\",\\n\\"debug\\": \\"1\\",\\n\\"selectfields\\": \\"id,pagetitle,parent\\",\\n\\"where\\": {\\n\\"published\\": \\"1\\",\\n\\"deleted\\": \\"0\\"\\n}\\n}]\\n}]\\n}]\\n}\\n`]]\\n\\nthe chunk mgctResourceTree:\\n<li class=\\"[[+_activelabel]] [[+_currentlabel]]\\" ><a href=\\"[[~[[+id]]]]\\">[[+pagetitle]]([[+id]])<\\/a><\\/li>\\n[[+innercounts.children:gt=`0`:then=`\\n<ul>[[+innerrows.children]]<\\/ul>\\n`:else=``]]\\n\\nget all Templates and its Resources:\\n\\n[[!migxGetCollectionTree?\\n&treeSchema=`\\n{\\n\\"classname\\": \\"modTemplate\\",\\n\\"debug\\": \\"1\\",\\n\\"tpl\\": \\"@CODE:<h3>[[+templatename]]<\\/h3><ul>[[+innerrows.resource]]<\\/ul>\\",\\n\\"selectfields\\": \\"id,templatename\\",\\n\\"_branches\\": [{\\n\\"alias\\": \\"resource\\",\\n\\"classname\\": \\"modResource\\",\\n\\"local\\": \\"template\\",\\n\\"foreign\\": \\"id\\",\\n\\"tpl\\": \\"@CODE:<li>[[+pagetitle]]([[+id]])<\\/li>\\",\\n\\"debug\\": \\"1\\",\\n\\"selectfields\\": \\"id,pagetitle,template\\"\\n}]\\n}\\n`]]\\n*\\/\\n\\nif (!class_exists(\'MigxGetCollectionTree\')) {\\n    class MigxGetCollectionTree\\n    {\\n        function __construct(modX & $modx, array $config = array())\\n        {\\n            $this->modx = &$modx;\\n            $this->config = $config;\\n        }\\n\\n        function getBranch($branch, $foreigns = array(), $level = 1)\\n        {\\n\\n            $rows = array();\\n\\n            if (count($foreigns) > 0) {\\n                $modx = &$this->modx;\\n\\n                $local = $modx->getOption(\'local\', $branch, \'\');\\n                $where = $modx->getOption(\'where\', $branch, array());\\n                $where = !empty($where) && !is_array($where) ? $modx->fromJSON($where) : $where;\\n                $where[] = array($local . \':IN\' => $foreigns);\\n\\n                $branch[\'where\'] = $modx->toJson($where);\\n\\n                $level++;\\n                \\/*\\n                if ($levelFromCurrent > 0){\\n                $levelFromCurrent++;    \\n                }\\n                *\\/\\n\\n                $rows = $this->getRows($branch, $level);\\n            }\\n\\n            return $rows;\\n        }\\n\\n        function getRows($scriptProperties, $level)\\n        {\\n            $migx = &$this->migx;\\n            $modx = &$this->modx;\\n\\n            $current = $modx->getOption(\'current\', $this->config, \'\');\\n            $currentKeyField = $modx->getOption(\'currentKeyField\', $this->config, \'id\');\\n            $currentlabel = $modx->getOption(\'currentlabel\', $this->config, \'current\');\\n            $classname = $modx->getOption(\'classname\', $scriptProperties, \'\');\\n\\t\\t\\t$sortResult = $modx->getOption(\'sortResult\', $scriptProperties, \'\');\\n            $currentClassname = !empty($this->config[\'currentClassname\']) ? $this->config[\'currentClassname\'] : $classname;\\n\\n            $activelabel = $modx->getOption(\'activelabel\', $this->config, \'active\');\\n            $return = $modx->getOption(\'return\', $this->config, \'parsed\');\\n\\n            $xpdo = $migx->getXpdoInstanceAndAddPackage($scriptProperties);\\n            $c = $migx->prepareQuery($xpdo, $scriptProperties);\\n            $rows = $migx->getCollection($c);\\n\\n            $branches = $modx->getOption(\'_branches\', $scriptProperties, array());\\n\\n            $collectedSubrows = array();\\n            foreach ($branches as $branch) {\\n                $foreign = $modx->getOption(\'foreign\', $branch, \'\');\\n                $local = $modx->getOption(\'local\', $branch, \'\');\\n                $alias = $modx->getOption(\'alias\', $branch, \'\');\\n                \\/\\/$activeonly = $modx->getOption(\'activeonly\', $branch, \'\');\\n                $foreigns = array();\\n                foreach ($rows as $row) {\\n                    $foreigns[] = $row[$foreign];\\n                }\\n\\n                $subrows = $this->getBranch($branch, $foreigns, $level);\\n                foreach ($subrows as $subrow) {\\n\\n                    $collectedSubrows[$subrow[$local]][] = $subrow;\\n                    $subrow[\'_active\'] = $modx->getOption(\'_active\', $subrow, \'0\');\\n                    \\/*\\n                    if (!empty($activeonly) && $subrow[\'_active\'] != \'1\') {\\n                    $output = \'\';\\n                    } else {\\n                    $collectedSubrows[$subrow[$local]][] = $subrow;\\n                    }\\n                    *\\/\\n                    if ($subrow[\'_active\'] == \'1\') {\\n                        \\/\\/echo \'active subrow:<pre>\' . print_r($subrow,1) . \'<\\/pre>\';\\n                        $activesubrow[$subrow[$local]] = true;\\n                    }\\n                    if ($subrow[\'_current\'] == \'1\') {\\n                        \\/\\/echo \'active subrow:<pre>\' . print_r($subrow,1) . \'<\\/pre>\';\\n                        $currentsubrow[$subrow[$local]] = true;\\n                    }\\n\\n\\n                }\\n                \\/\\/insert subrows\\n                $temprows = $rows;\\n                $rows = array();\\n                foreach ($temprows as $row) {\\n                    if (isset($collectedSubrows[$row[$foreign]])) {\\n                        $row[\'_active\'] = \'0\';\\n                        $row[\'_currentparent\'] = \'0\';\\n                        if (isset($activesubrow[$row[$foreign]]) && $activesubrow[$row[$foreign]]) {\\n                            $row[\'_active\'] = \'1\';\\n                            \\/\\/echo \'active row:<pre>\' . print_r($row,1) . \'<\\/pre>\';\\n                        }\\n                        if (isset($currentsubrow[$row[$foreign]]) && $currentsubrow[$row[$foreign]]) {\\n                            $row[\'_currentparent\'] = \'1\';\\n                            \\/\\/echo \'active row:<pre>\' . print_r($row,1) . \'<\\/pre>\';\\n                        }\\n\\n                        \\/\\/render innerrows\\n                        \\/\\/$output = $migx->renderOutput($collectedSubrows[$row[$foreign]],$scriptProperties);\\n                        \\/\\/$output = $collectedSubrows[$row[$foreign]];\\n\\n                        $row[\'innercounts.\' . $alias] = count($collectedSubrows[$row[$foreign]]);\\n                        $row[\'_scriptProperties\'][$alias] = $branch;\\n                        \\/*\\n                        switch ($return) {\\n                        case \'parsed\':\\n                        $output = $migx->renderOutput($collectedSubrows[$row[$foreign]], $branch);\\n                        \\/\\/$subbranches = $modx->getOption(\'_branches\', $branch, array());\\n                        \\/\\/if there are any placeholders left with the same alias from subbranch, remove them\\n                        $output = str_replace(\'[[+innerrows.\' . $alias . \']]\', \'\', $output);\\n                        break;\\n                        case \'json\':\\n                        case \'arrayprint\':\\n                        $output = $collectedSubrows[$row[$foreign]];\\n                        break;\\n                        }\\n                        *\\/\\n                        $output = $collectedSubrows[$row[$foreign]];\\n\\n                        $row[\'innerrows.\' . $alias] = $output;\\n\\n                    }\\n                    $rows[] = $row;\\n                }\\n\\n            }\\n\\n            $temprows = $rows;\\n            $rows = array();\\n            foreach ($temprows as $row) {\\n                \\/\\/add additional placeholders\\n                $row[\'_level\'] = $level;\\n                $row[\'_active\'] = $modx->getOption(\'_active\', $row, \'0\');\\n                if ($currentClassname == $classname && $row[$currentKeyField] == $current) {\\n                    $row[\'_current\'] = \'1\';\\n                    $row[\'_currentlabel\'] = $currentlabel;\\n                    $row[\'_active\'] = \'1\';\\n                } else {\\n                    $row[\'_current\'] = \'0\';\\n                    $row[\'_currentlabel\'] = \'\';\\n                }\\n                if ($row[\'_active\'] == \'1\') {\\n                    $row[\'_activelabel\'] = $activelabel;\\n                } else {\\n                    $row[\'_activelabel\'] = \'\';\\n                }\\n                $rows[] = $row;\\n            }\\n\\n            if (!empty($sortResult) && is_array($sortResult)){\\n                $rows = $migx->sortDbResult($rows, $sortResult);\\n\\t\\t\\t}\\n\\n            return $rows;\\n        }\\n\\n        function renderRow($row, $levelFromCurrent = 0)\\n        {\\n            $migx = &$this->migx;\\n            $modx = &$this->modx;\\n            $return = $modx->getOption(\'return\', $this->config, \'parsed\');\\n            $branchProperties = $modx->getOption(\'_scriptProperties\', $row, array());\\n            $current = $modx->getOption(\'_current\', $row, \'0\');\\n            $currentparent = $modx->getOption(\'_currentparent\', $row, \'0\');\\n            $levelFromCurrent = $current == \'1\' ? 1 : $levelFromCurrent;\\n            $row[\'_levelFromCurrent\'] = $levelFromCurrent;\\n            foreach ($branchProperties as $alias => $properties) {\\n                $innerrows = $modx->getOption(\'innerrows.\' . $alias, $row, array());\\n                $subrows = $this->renderRows($innerrows, $properties, $levelFromCurrent, $currentparent);\\n                if ($return == \'parsed\') {\\n                    $subrows = $migx->renderOutput($subrows, $properties);\\n                }\\n                $row[\'innerrows.\' . $alias] = $subrows;\\n            }\\n\\n            return $row;\\n        }\\n\\n        function renderRows($rows, $scriptProperties, $levelFromCurrent = 0, $siblingOfCurrent = \'0\')\\n        {\\n\\n            $modx = &$this->modx;\\n            $temprows = $rows;\\n            $rows = array();\\n            if ($levelFromCurrent > 0) {\\n                $levelFromCurrent++;\\n            }\\n            foreach ($temprows as $row) {\\n                $row[\'_siblingOfCurrent\'] = $siblingOfCurrent;\\n                $row = $this->renderRow($row, $levelFromCurrent);\\n                $rows[] = $row;\\n            }\\n            return $rows;\\n        }\\n    }\\n}\\n\\n$instance = new MigxGetCollectionTree($modx, $scriptProperties);\\n\\nif (is_array($treeSchema)) {\\n    $scriptProperties = $treeSchema;\\n\\n    $migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\n    if (!($migx instanceof Migx))\\n        return \'\';\\n\\n    $defaultcontext = \'web\';\\n    $migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : $defaultcontext;\\n    $instance->migx = &$migx;\\n\\n    $level = 1;\\n    $scriptProperties[\'alias\'] = \'row\';\\n    $rows = $instance->getRows($scriptProperties, $level);\\n\\n    $row = array();\\n    $row[\'innercounts.row\'] = count($rows);\\n    $row[\'innerrows.row\'] = $rows;\\n    $row[\'_scriptProperties\'][\'row\'] = $scriptProperties;\\n\\n    $rows = $instance->renderRow($row);\\n\\n    $output = \'\';\\n    switch ($return) {\\n        case \'parsed\':\\n            $output = $modx->getOption(\'innerrows.row\', $rows, \'\');\\n            break;\\n        case \'json\':\\n            $output = $modx->toJson($rows);\\n            break;\\n        case \'arrayprint\':\\n            $output = \'<pre>\' . print_r($rows, 1) . \'<\\/pre>\';\\n            break;\\n    }\\n\\n    return $output;\\n\\n}"}',
        'guid' => 'cb12e7e3f52a37c570f992bf3af02612',
        'native_key' => NULL,
        'signature' => '9fbd8c469998e204f6a657e4e63ef7fa',
      ),
      '68b0a5d2152ffaa511872c95bc398088' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"migxIsNewObject","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"if (isset($_REQUEST[\'object_id\']) && $_REQUEST[\'object_id\']==\'new\'){\\n    return 1;\\n}","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"if (isset($_REQUEST[\'object_id\']) && $_REQUEST[\'object_id\']==\'new\'){\\n    return 1;\\n}"}',
        'guid' => '80858db613de7e07d23099e61891faf5',
        'native_key' => NULL,
        'signature' => 'ad7c3941ae9b48ceb86f35144ec4086e',
      ),
      'c542c993d59b7621ee398f988ecc2629' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"migx_example_validate","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"$properties = &$modx->getOption(\'scriptProperties\', $scriptProperties, array());\\n$object = &$modx->getOption(\'object\', $scriptProperties, null);\\n$postvalues = &$modx->getOption(\'postvalues\', $scriptProperties, array());\\n$form_field = $modx->getOption(\'form_field\', $scriptProperties, array());\\n$value = $modx->getOption(\'value\', $scriptProperties, \'\');\\n$validation_type = $modx->getOption(\'validation_type\', $scriptProperties, \'\');\\n$result = \'\';\\nswitch ($validation_type) {\\n    case \'gt25\':\\n        if ((int) $value > 25) {\\n        } else {\\n            $error_message = $validation_type; \\/\\/ may be custom validation message\\n            $error[\'caption\'] = $form_field;\\n            $error[\'validation_type\'] = $error_message;\\n            $result[\'error\'] = $error;\\n            $result = $modx->toJson($result);\\n        }\\n        break;\\n}\\nreturn $result;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"$properties = &$modx->getOption(\'scriptProperties\', $scriptProperties, array());\\n$object = &$modx->getOption(\'object\', $scriptProperties, null);\\n$postvalues = &$modx->getOption(\'postvalues\', $scriptProperties, array());\\n$form_field = $modx->getOption(\'form_field\', $scriptProperties, array());\\n$value = $modx->getOption(\'value\', $scriptProperties, \'\');\\n$validation_type = $modx->getOption(\'validation_type\', $scriptProperties, \'\');\\n$result = \'\';\\nswitch ($validation_type) {\\n    case \'gt25\':\\n        if ((int) $value > 25) {\\n        } else {\\n            $error_message = $validation_type; \\/\\/ may be custom validation message\\n            $error[\'caption\'] = $form_field;\\n            $error[\'validation_type\'] = $error_message;\\n            $result[\'error\'] = $error;\\n            $result = $modx->toJson($result);\\n        }\\n        break;\\n}\\nreturn $result;"}',
        'guid' => '7d3f5dba12384a7ac90056ca7871c76f',
        'native_key' => NULL,
        'signature' => 'd241921eeafe2df1a85a87fd8c096c1b',
      ),
      '10ac70cc66ad3090a9797eeef13ff52b' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"migxHookAftercollectmigxitems","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"$configs = $modx->getOption(\'configs\', $_REQUEST, \'\');\\n\\n$rows = $modx->getOption(\'rows\', $scriptProperties, array());\\n$newrows = array();\\n\\n\\nif (is_array($rows)) {\\n    $max_id = 0;\\n    $dbfields = array();\\n    $existing_dbfields = array();\\n    foreach ($rows as $key => $row) {\\n        if (isset($row[\'MIGX_id\']) && $row[\'MIGX_id\'] > $max_id) {\\n            $max_id = $row[\'MIGX_id\'];\\n        }\\n        if (isset($row[\'selected_dbfields\']) && isset($row[\'existing_dbfields\'])) {\\n            $dbfields = is_array($row[\'selected_dbfields\']) ? $row[\'selected_dbfields\'] : array($row[\'selected_dbfields\']);\\n            \\n            $existing_dbfields = explode(\'||\', $row[\'existing_dbfields\']);\\n            \\/\\/echo \'<pre>\' . print_r($existing_dbfields,1) . \'<\\/pre>\';die();\\n\\n        } else {\\n            $newrows[] = $row;\\n        }\\n\\n    }\\n\\n    foreach ($dbfields as $dbfield) {\\n        if (!empty($dbfield) && !in_array($dbfield, $existing_dbfields)) {\\n            $max_id++;\\n            $newrow = array();\\n            $newrow[\'MIGX_id\'] = $max_id;\\n\\n            switch ($configs) {\\n                case \'migxformtabfields\':\\n                    $newrow[\'field\'] = $dbfield;\\n                    $newrow[\'caption\'] = $dbfield;\\n                    break;\\n                case \'migxcolumns\':\\n                    $newrow[\'dataIndex\'] = $dbfield;\\n                    $newrow[\'header\'] = $dbfield;\\n                    break;                    \\n            }\\n\\n\\n            $newrows[] = $newrow;\\n        }\\n    }\\n\\n\\n}\\n\\n\\nreturn json_encode($newrows);","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"$configs = $modx->getOption(\'configs\', $_REQUEST, \'\');\\n\\n$rows = $modx->getOption(\'rows\', $scriptProperties, array());\\n$newrows = array();\\n\\n\\nif (is_array($rows)) {\\n    $max_id = 0;\\n    $dbfields = array();\\n    $existing_dbfields = array();\\n    foreach ($rows as $key => $row) {\\n        if (isset($row[\'MIGX_id\']) && $row[\'MIGX_id\'] > $max_id) {\\n            $max_id = $row[\'MIGX_id\'];\\n        }\\n        if (isset($row[\'selected_dbfields\']) && isset($row[\'existing_dbfields\'])) {\\n            $dbfields = is_array($row[\'selected_dbfields\']) ? $row[\'selected_dbfields\'] : array($row[\'selected_dbfields\']);\\n            \\n            $existing_dbfields = explode(\'||\', $row[\'existing_dbfields\']);\\n            \\/\\/echo \'<pre>\' . print_r($existing_dbfields,1) . \'<\\/pre>\';die();\\n\\n        } else {\\n            $newrows[] = $row;\\n        }\\n\\n    }\\n\\n    foreach ($dbfields as $dbfield) {\\n        if (!empty($dbfield) && !in_array($dbfield, $existing_dbfields)) {\\n            $max_id++;\\n            $newrow = array();\\n            $newrow[\'MIGX_id\'] = $max_id;\\n\\n            switch ($configs) {\\n                case \'migxformtabfields\':\\n                    $newrow[\'field\'] = $dbfield;\\n                    $newrow[\'caption\'] = $dbfield;\\n                    break;\\n                case \'migxcolumns\':\\n                    $newrow[\'dataIndex\'] = $dbfield;\\n                    $newrow[\'header\'] = $dbfield;\\n                    break;                    \\n            }\\n\\n\\n            $newrows[] = $newrow;\\n        }\\n    }\\n\\n\\n}\\n\\n\\nreturn json_encode($newrows);"}',
        'guid' => 'd89202ce629a27ff1952a24604edd134',
        'native_key' => NULL,
        'signature' => '2d175c1976c7edf33ef8df4015c2132e',
      ),
      '3eb3c4f30bfcab141a38df82dcef0919' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"migxAutoPublish","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"$classnames = explode(\',\', $modx->getOption(\'classnames\',$scriptProperties,\'\'));\\n$packageName = $modx->getOption(\'packageName\',$scriptProperties,\'\');\\n\\nswitch ($mode) {\\n    case \'datetime\' :\\n        $timeNow = strftime(\'%Y-%m-%d %H:%M:%S\');\\n        break;\\n    case \'unixtime\' :\\n        $timeNow = time();\\n        break;\\n    default :\\n        $timeNow = strftime(\'%Y-%m-%d %H:%M:%S\');\\n        break;\\n}\\n\\n$modx->addPackage($packageName, $modx->getOption(\'core_path\') . \'components\\/\' . $packageName . \'\\/model\\/\');\\n\\nforeach ($classnames as $classname) {\\n    if (!empty($classname)) {\\n        $tblResource = $modx->getTableName($classname);\\n        if (!$result = $modx->exec(\\"UPDATE {$tblResource} SET published=1,publishedon=pub_date,pub_date=null WHERE pub_date < \'{$timeNow}\' AND pub_date > 0 AND published=0\\")) {\\n            $modx->log(modX::LOG_LEVEL_ERROR, \'Error while refreshing resource publishing data: \' . print_r($modx->errorInfo(), true));\\n        }\\n        if (!$result = $modx->exec(\\"UPDATE $tblResource SET published=0,unpub_date=null WHERE unpub_date < \'{$timeNow}\' AND unpub_date IS NOT NULL AND unpub_date > 0 AND published=1\\")) {\\n            $modx->log(modX::LOG_LEVEL_ERROR, \'Error while refreshing resource unpublishing data: \' . print_r($modx->errorInfo(), true));\\n        }\\n    }\\n\\n}\\n$modx->cacheManager->refresh();","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"$classnames = explode(\',\', $modx->getOption(\'classnames\',$scriptProperties,\'\'));\\n$packageName = $modx->getOption(\'packageName\',$scriptProperties,\'\');\\n\\nswitch ($mode) {\\n    case \'datetime\' :\\n        $timeNow = strftime(\'%Y-%m-%d %H:%M:%S\');\\n        break;\\n    case \'unixtime\' :\\n        $timeNow = time();\\n        break;\\n    default :\\n        $timeNow = strftime(\'%Y-%m-%d %H:%M:%S\');\\n        break;\\n}\\n\\n$modx->addPackage($packageName, $modx->getOption(\'core_path\') . \'components\\/\' . $packageName . \'\\/model\\/\');\\n\\nforeach ($classnames as $classname) {\\n    if (!empty($classname)) {\\n        $tblResource = $modx->getTableName($classname);\\n        if (!$result = $modx->exec(\\"UPDATE {$tblResource} SET published=1,publishedon=pub_date,pub_date=null WHERE pub_date < \'{$timeNow}\' AND pub_date > 0 AND published=0\\")) {\\n            $modx->log(modX::LOG_LEVEL_ERROR, \'Error while refreshing resource publishing data: \' . print_r($modx->errorInfo(), true));\\n        }\\n        if (!$result = $modx->exec(\\"UPDATE $tblResource SET published=0,unpub_date=null WHERE unpub_date < \'{$timeNow}\' AND unpub_date IS NOT NULL AND unpub_date > 0 AND published=1\\")) {\\n            $modx->log(modX::LOG_LEVEL_ERROR, \'Error while refreshing resource unpublishing data: \' . print_r($modx->errorInfo(), true));\\n        }\\n    }\\n\\n}\\n$modx->cacheManager->refresh();"}',
        'guid' => '16eb5def687992de4ec983f4b9b7dc16',
        'native_key' => NULL,
        'signature' => '171d203ad3c3c7b79a10ea51860f497e',
      ),
      '488aab26bb29e2a2b8b448bacf03db7f' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"migxGetObject","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/*\\ngetXpdoInstanceAndAddPackage - properties\\n\\n$prefix\\n$usecustomprefix\\n$packageName\\n\\n\\nprepareQuery - properties:\\n\\n$limit\\n$offset\\n$totalVar\\n$where\\n$queries\\n$sortConfig\\n$groupby\\n$joins\\n$selectfields\\n$classname\\n$debug\\n\\nrenderOutput - properties:\\n\\n$tpl\\n$wrapperTpl\\n$toSeparatePlaceholders\\n$toPlaceholder\\n$outputSeparator\\n$placeholdersKeyField\\n$toJsonPlaceholder\\n$jsonVarKey\\n$addfields\\n\\nmigxGetObject - properties\\n\\n$id\\n$toPlaceholders - if not empty, output to placeholders with specified prefix or print the array, if \'print_r\' is the property-value\\n\\n*\\/\\n\\n$id = $modx->getOption(\'id\',$scriptProperties,\'\');\\n$scriptProperties[\'limit\'] = 1;\\n\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\nif (!($migx instanceof Migx))\\n    return \'\';\\n\\/\\/$modx->migx = &$migx;\\n\\n$xpdo = $migx->getXpdoInstanceAndAddPackage($scriptProperties);\\n\\n$defaultcontext = \'web\';\\n$migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : $defaultcontext;\\n\\n$c = $migx->prepareQuery($xpdo,$scriptProperties);\\nif (!empty($id)){\\n    $c->where(array(\'id\'=>$id));\\n\\t$c->prepare();\\n}\\t\\n$rows = $migx->getCollection($c);\\n\\n$output = $migx->renderOutput($rows,$scriptProperties);\\n\\nreturn $output;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"\\/*\\ngetXpdoInstanceAndAddPackage - properties\\n\\n$prefix\\n$usecustomprefix\\n$packageName\\n\\n\\nprepareQuery - properties:\\n\\n$limit\\n$offset\\n$totalVar\\n$where\\n$queries\\n$sortConfig\\n$groupby\\n$joins\\n$selectfields\\n$classname\\n$debug\\n\\nrenderOutput - properties:\\n\\n$tpl\\n$wrapperTpl\\n$toSeparatePlaceholders\\n$toPlaceholder\\n$outputSeparator\\n$placeholdersKeyField\\n$toJsonPlaceholder\\n$jsonVarKey\\n$addfields\\n\\nmigxGetObject - properties\\n\\n$id\\n$toPlaceholders - if not empty, output to placeholders with specified prefix or print the array, if \'print_r\' is the property-value\\n\\n*\\/\\n\\n$id = $modx->getOption(\'id\',$scriptProperties,\'\');\\n$scriptProperties[\'limit\'] = 1;\\n\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\nif (!($migx instanceof Migx))\\n    return \'\';\\n\\/\\/$modx->migx = &$migx;\\n\\n$xpdo = $migx->getXpdoInstanceAndAddPackage($scriptProperties);\\n\\n$defaultcontext = \'web\';\\n$migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : $defaultcontext;\\n\\n$c = $migx->prepareQuery($xpdo,$scriptProperties);\\nif (!empty($id)){\\n    $c->where(array(\'id\'=>$id));\\n\\t$c->prepare();\\n}\\t\\n$rows = $migx->getCollection($c);\\n\\n$output = $migx->renderOutput($rows,$scriptProperties);\\n\\nreturn $output;"}',
        'guid' => 'bc7ef09902e53782e33a493b8acdbb08',
        'native_key' => NULL,
        'signature' => 'ba1ed12b0b6558a2590bc44dfee72313',
      ),
    ),
    'Plugins' => 
    array (
      '78e74b7267f999d4b7368babdbd0a5c7' => 
      array (
        'unique_key' => 'name',
        'preserve_keys' => false,
        'update_object' => true,
        'related_objects' => 
        array (
          'PluginEvents' => 
          array (
            'b919df591c1ec328cd38eca6dd4c5446' => 
            array (
              'preserve_keys' => true,
              'update_object' => false,
              'unique_key' => 
              array (
                0 => 'pluginid',
                1 => 'event',
              ),
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnDocFormPrerender","priority":0,"propertyset":0}',
              'guid' => '7776fdb35b0297e9cbf1a2762953d6d3',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnDocFormPrerender',
              ),
              'signature' => 'aa06a64a99a90037ecec31172b1ca469',
            ),
            '80905c90b353546f57643ed8e5ff10d9' => 
            array (
              'preserve_keys' => true,
              'update_object' => false,
              'unique_key' => 
              array (
                0 => 'pluginid',
                1 => 'event',
              ),
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnTVInputPropertiesList","priority":0,"propertyset":0}',
              'guid' => '632321cc95c1e4d4ffaca998eadd423c',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnTVInputPropertiesList',
              ),
              'signature' => '05c3f84132046740856c1a27251f69f9',
            ),
            '62664b2e05e1c4ac24982e8c6ccbe3e5' => 
            array (
              'preserve_keys' => true,
              'update_object' => false,
              'unique_key' => 
              array (
                0 => 'pluginid',
                1 => 'event',
              ),
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnTVInputRenderList","priority":0,"propertyset":0}',
              'guid' => '3a7ec964496abf341c402918254b4618',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnTVInputRenderList',
              ),
              'signature' => '0d8b75ea8605c76008e49c92e24c5493',
            ),
          ),
        ),
        'related_object_attributes' => 
        array (
          'PluginEvents' => 
          array (
            'preserve_keys' => true,
            'update_object' => false,
            'unique_key' => 
            array (
              0 => 'pluginid',
              1 => 'event',
            ),
          ),
        ),
        'class' => 'modPlugin',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"MIGX","description":"","editor_type":0,"category":0,"cache_type":0,"plugincode":"$corePath = $modx->getOption(\'migx.core_path\',null,$modx->getOption(\'core_path\').\'components\\/migx\\/\');\\n$assetsUrl = $modx->getOption(\'migx.assets_url\', null, $modx->getOption(\'assets_url\') . \'components\\/migx\\/\');\\nswitch ($modx->event->name) {\\n    case \'OnTVInputRenderList\':\\n        $modx->event->output($corePath.\'elements\\/tv\\/input\\/\');\\n        break;\\n    case \'OnTVInputPropertiesList\':\\n        $modx->event->output($corePath.\'elements\\/tv\\/inputoptions\\/\');\\n        break;\\n\\n        case \'OnDocFormPrerender\':\\n        $modx->controller->addCss($assetsUrl.\'css\\/mgr.css\');\\n        break; \\n \\n    \\/*          \\n    case \'OnTVOutputRenderList\':\\n        $modx->event->output($corePath.\'elements\\/tv\\/output\\/\');\\n        break;\\n    case \'OnTVOutputRenderPropertiesList\':\\n        $modx->event->output($corePath.\'elements\\/tv\\/properties\\/\');\\n        break;\\n    \\n    case \'OnDocFormPrerender\':\\n        $assetsUrl = $modx->getOption(\'colorpicker.assets_url\',null,$modx->getOption(\'assets_url\').\'components\\/colorpicker\\/\'); \\n        $modx->regClientStartupHTMLBlock(\'<script type=\\"text\\/javascript\\">\\n        Ext.onReady(function() {\\n            \\n        });\\n        <\\/script>\');\\n        $modx->regClientStartupScript($assetsUrl.\'sources\\/ColorPicker.js\');\\n        $modx->regClientStartupScript($assetsUrl.\'sources\\/ColorMenu.js\');\\n        $modx->regClientStartupScript($assetsUrl.\'sources\\/ColorPickerField.js\');\\t\\t\\n        $modx->regClientCSS($assetsUrl.\'resources\\/css\\/colorpicker.css\');\\n        break;\\n     *\\/\\n}\\nreturn;","locked":0,"properties":"a:0:{}","disabled":0,"moduleguid":"","static":0,"static_file":"","content":"$corePath = $modx->getOption(\'migx.core_path\',null,$modx->getOption(\'core_path\').\'components\\/migx\\/\');\\n$assetsUrl = $modx->getOption(\'migx.assets_url\', null, $modx->getOption(\'assets_url\') . \'components\\/migx\\/\');\\nswitch ($modx->event->name) {\\n    case \'OnTVInputRenderList\':\\n        $modx->event->output($corePath.\'elements\\/tv\\/input\\/\');\\n        break;\\n    case \'OnTVInputPropertiesList\':\\n        $modx->event->output($corePath.\'elements\\/tv\\/inputoptions\\/\');\\n        break;\\n\\n        case \'OnDocFormPrerender\':\\n        $modx->controller->addCss($assetsUrl.\'css\\/mgr.css\');\\n        break; \\n \\n    \\/*          \\n    case \'OnTVOutputRenderList\':\\n        $modx->event->output($corePath.\'elements\\/tv\\/output\\/\');\\n        break;\\n    case \'OnTVOutputRenderPropertiesList\':\\n        $modx->event->output($corePath.\'elements\\/tv\\/properties\\/\');\\n        break;\\n    \\n    case \'OnDocFormPrerender\':\\n        $assetsUrl = $modx->getOption(\'colorpicker.assets_url\',null,$modx->getOption(\'assets_url\').\'components\\/colorpicker\\/\'); \\n        $modx->regClientStartupHTMLBlock(\'<script type=\\"text\\/javascript\\">\\n        Ext.onReady(function() {\\n            \\n        });\\n        <\\/script>\');\\n        $modx->regClientStartupScript($assetsUrl.\'sources\\/ColorPicker.js\');\\n        $modx->regClientStartupScript($assetsUrl.\'sources\\/ColorMenu.js\');\\n        $modx->regClientStartupScript($assetsUrl.\'sources\\/ColorPickerField.js\');\\t\\t\\n        $modx->regClientCSS($assetsUrl.\'resources\\/css\\/colorpicker.css\');\\n        break;\\n     *\\/\\n}\\nreturn;"}',
        'guid' => '62f58f69516a65b71f9573c4f041ada4',
        'native_key' => NULL,
        'signature' => '35264e9692b540cefa7fba2d6c7d1ce1',
      ),
      '285f33e91c21103a31a6b62e57f562bf' => 
      array (
        'unique_key' => 'name',
        'preserve_keys' => false,
        'update_object' => true,
        'related_objects' => 
        array (
          'PluginEvents' => 
          array (
            'd7aaad61c113e7a9bb8d73753723ceb9' => 
            array (
              'preserve_keys' => true,
              'update_object' => false,
              'unique_key' => 
              array (
                0 => 'pluginid',
                1 => 'event',
              ),
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnDocFormPrerender","priority":0,"propertyset":0}',
              'guid' => '30159332f39a5317f6092d47ce4b26de',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnDocFormPrerender',
              ),
              'signature' => 'd6ab174fa5a8c290e5ebcfcb01dbc59c',
            ),
          ),
        ),
        'related_object_attributes' => 
        array (
          'PluginEvents' => 
          array (
            'preserve_keys' => true,
            'update_object' => false,
            'unique_key' => 
            array (
              0 => 'pluginid',
              1 => 'event',
            ),
          ),
        ),
        'class' => 'modPlugin',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"MIGXquip","description":"","editor_type":0,"category":0,"cache_type":0,"plugincode":"$quipCorePath = $modx->getOption(\'quip.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/quip\\/\');\\n\\/\\/$assetsUrl = $modx->getOption(\'migx.assets_url\', null, $modx->getOption(\'assets_url\') . \'components\\/migx\\/\');\\nswitch ($modx->event->name)\\n{\\n\\n    case \'OnDocFormPrerender\':\\n\\n        \\n        require_once $quipCorePath . \'model\\/quip\\/quip.class.php\';\\n        $modx->quip = new Quip($modx);\\n\\n        $modx->lexicon->load(\'quip:default\');\\n        $quipconfig = $modx->toJson($modx->quip->config);\\n        \\n        $js = \\"\\n        Quip.config = Ext.util.JSON.decode(\'{$quipconfig}\');\\n        console.log(Quip);\\";\\n\\n        \\/\\/$modx->controller->addCss($assetsUrl . \'css\\/mgr.css\');\\n        $modx->controller->addJavascript($modx->quip->config[\'jsUrl\'].\'quip.js\');\\n        $modx->controller->addHtml(\'<script type=\\"text\\/javascript\\">\' . $js . \'<\\/script>\');\\n        break;\\n\\n}\\nreturn;","locked":0,"properties":"a:0:{}","disabled":1,"moduleguid":"","static":0,"static_file":"","content":"$quipCorePath = $modx->getOption(\'quip.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/quip\\/\');\\n\\/\\/$assetsUrl = $modx->getOption(\'migx.assets_url\', null, $modx->getOption(\'assets_url\') . \'components\\/migx\\/\');\\nswitch ($modx->event->name)\\n{\\n\\n    case \'OnDocFormPrerender\':\\n\\n        \\n        require_once $quipCorePath . \'model\\/quip\\/quip.class.php\';\\n        $modx->quip = new Quip($modx);\\n\\n        $modx->lexicon->load(\'quip:default\');\\n        $quipconfig = $modx->toJson($modx->quip->config);\\n        \\n        $js = \\"\\n        Quip.config = Ext.util.JSON.decode(\'{$quipconfig}\');\\n        console.log(Quip);\\";\\n\\n        \\/\\/$modx->controller->addCss($assetsUrl . \'css\\/mgr.css\');\\n        $modx->controller->addJavascript($modx->quip->config[\'jsUrl\'].\'quip.js\');\\n        $modx->controller->addHtml(\'<script type=\\"text\\/javascript\\">\' . $js . \'<\\/script>\');\\n        break;\\n\\n}\\nreturn;"}',
        'guid' => '9b629f60bdf040db0170b0c2c47c431e',
        'native_key' => NULL,
        'signature' => 'dc45361b12165843f58dd69e70e972d4',
      ),
      '9ad72f24ff7f620d4ff2233a9255c40d' => 
      array (
        'unique_key' => 'name',
        'preserve_keys' => false,
        'update_object' => true,
        'related_objects' => 
        array (
          'PluginEvents' => 
          array (
            '63b28de3050c79e07e38d27441928ae0' => 
            array (
              'preserve_keys' => true,
              'update_object' => false,
              'unique_key' => 
              array (
                0 => 'pluginid',
                1 => 'event',
              ),
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnFileManagerUpload","priority":0,"propertyset":0}',
              'guid' => '635d555c67a6babec94da74e547aceef',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnFileManagerUpload',
              ),
              'signature' => '6c122636dceaa91646578833a587b351',
            ),
          ),
        ),
        'related_object_attributes' => 
        array (
          'PluginEvents' => 
          array (
            'preserve_keys' => true,
            'update_object' => false,
            'unique_key' => 
            array (
              0 => 'pluginid',
              1 => 'event',
            ),
          ),
        ),
        'class' => 'modPlugin',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"migxResizeOnUpload","description":"","editor_type":0,"category":0,"cache_type":0,"plugincode":"\\/**\\n * migxResizeOnUpload Plugin\\n *\\n * Events: OnFileManagerUpload\\n * Author: Bruno Perner <b.perner@gmx.de>\\n * Modified to read multiple configs from mediasource-property\\n * \\n * First Author: Vasiliy Naumkin <bezumkin@yandex.ru>\\n * Required: PhpThumbOf snippet for resizing images\\n * \\n * Example: mediasource - property \'resizeConfig\':\\n * [{\\"alias\\":\\"origin\\",\\"w\\":\\"500\\",\\"h\\":\\"500\\",\\"far\\":1},{\\"alias\\":\\"thumb\\",\\"w\\":\\"150\\",\\"h\\":\\"150\\",\\"far\\":1}]\\n *\\/\\n\\nif ($modx->event->name != \'OnFileManagerUpload\') {\\n    return;\\n}\\n\\n\\n$file = $modx->event->params[\'files\'][\'file\'];\\n$directory = $modx->event->params[\'directory\'];\\n\\nif ($file[\'error\'] != 0) {\\n    return;\\n}\\n\\n$name = $file[\'name\'];\\n\\/\\/$extensions = explode(\',\', $modx->getOption(\'upload_images\'));\\n\\n$source = $modx->event->params[\'source\'];\\n\\nif ($source instanceof modMediaSource) {\\n    \\/\\/$dirTree = $modx->getOption(\'dirtree\', $_REQUEST, \'\');\\n    \\/\\/$modx->setPlaceholder(\'docid\', $resource_id);\\n    $source->initialize();\\n    $basePath = str_replace(\'\\/.\\/\', \'\\/\', $source->getBasePath());\\n    \\/\\/$cachepath = $cachepath . $dirTree;\\n    $baseUrl = $modx->getOption(\'site_url\') . $source->getBaseUrl();\\n    \\/\\/$baseUrl = $baseUrl . $dirTree;\\n    $sourceProperties = $source->getPropertyList();\\n\\n    \\/\\/echo \'<pre>\' . print_r($sourceProperties, 1) . \'<\\/pre>\';\\n    \\/\\/$allowedExtensions = $modx->getOption(\'allowedFileTypes\', $sourceProperties, \'\');\\n    \\/\\/$allowedExtensions = empty($allowedExtensions) ? \'jpg,jpeg,png,gif\' : $allowedExtensions;\\n    \\/\\/$maxFilesizeMb = $modx->getOption(\'maxFilesizeMb\', $sourceProperties, \'8\');\\n    \\/\\/$maxFiles = $modx->getOption(\'maxFiles\', $sourceProperties, \'0\');\\n    \\/\\/$thumbX = $modx->getOption(\'thumbX\', $sourceProperties, \'100\');\\n    \\/\\/$thumbY = $modx->getOption(\'thumbY\', $sourceProperties, \'100\');\\n    $resizeConfigs = $modx->getOption(\'resizeConfigs\', $sourceProperties, \'\');\\n    $resizeConfigs = $modx->fromJson($resizeConfigs);\\n    $thumbscontainer = $modx->getOption(\'thumbscontainer\', $sourceProperties, \'thumbs\\/\');\\n    $imageExtensions = $modx->getOption(\'imageExtensions\', $sourceProperties, \'jpg,jpeg,png,gif,JPG\');\\n    $imageExtensions = explode(\',\', $imageExtensions);\\n    \\/\\/$uniqueFilenames = $modx->getOption(\'uniqueFilenames\', $sourceProperties, false);\\n    \\/\\/$onImageUpload = $modx->getOption(\'onImageUpload\', $sourceProperties, \'\');\\n    \\/\\/$onImageRemove = $modx->getOption(\'onImageRemove\', $sourceProperties, \'\');\\n    $cleanalias = $modx->getOption(\'cleanFilename\', $sourceProperties, false);\\n\\n}\\n\\nif (is_array($resizeConfigs) && count($resizeConfigs) > 0) {\\n    foreach ($resizeConfigs as $rc) {\\n        if (isset($rc[\'alias\'])) {\\n            $filePath = $basePath . $directory;\\n            $filePath = str_replace(\'\\/\\/\',\'\\/\',$filePath);\\n            if ($rc[\'alias\'] == \'origin\') {\\n                $thumbPath = $filePath;\\n            } else {\\n                $thumbPath = $filePath . $rc[\'alias\'] . \'\\/\';\\n                $permissions = octdec(\'0\' . (int)($modx->getOption(\'new_folder_permissions\', null, \'755\', true)));\\n                if (!@mkdir($thumbPath, $permissions, true)) {\\n                    $modx->log(MODX_LOG_LEVEL_ERROR, sprintf(\'[migxResourceMediaPath]: could not create directory %s).\', $thumbPath));\\n                } else {\\n                    chmod($thumbPath, $permissions);\\n                }\\n\\n            }\\n\\n\\n            $filename = $filePath . $name;\\n            $thumbname = $thumbPath . $name;\\n            $ext = substr(strrchr($name, \'.\'), 1);\\n            if (in_array($ext, $imageExtensions)) {\\n                $sizes = getimagesize($filename);\\n                echo $sizes[0]; \\n                \\/\\/$format = substr($sizes[\'mime\'], 6);\\n                if ($sizes[0] > $rc[\'w\'] || $sizes[1] > $rc[\'h\']) {\\n                    if ($sizes[0] < $rc[\'w\']) {\\n                        $rc[\'w\'] = $sizes[0];\\n                    }\\n                    if ($sizes[1] < $rc[\'h\']) {\\n                        $rc[\'h\'] = $sizes[1];\\n                    }\\n                    $type = $sizes[0] > $sizes[1] ? \'landscape\' : \'portrait\';\\n                    if (isset($rc[\'far\']) && $rc[\'far\'] == \'1\' && isset($rc[\'w\']) && isset($rc[\'h\'])) {\\n                        if ($type = \'landscape\') {\\n                            unset($rc[\'h\']);\\n                        }else {\\n                            unset($rc[\'w\']);\\n                        }\\n                    }\\n\\n                    $options = \'\';\\n                    foreach ($rc as $k => $v) {\\n                        if ($k != \'alias\') {\\n                            $options .= \'&\' . $k . \'=\' . $v;\\n                        }\\n                    }\\n                    $resized = $modx->runSnippet(\'phpthumbof\', array(\'input\' => $filePath . $name, \'options\' => $options));\\n                    rename(MODX_BASE_PATH . substr($resized, 1), $thumbname);\\n                }\\n            }\\n\\n\\n        }\\n    }\\n}","locked":0,"properties":"a:0:{}","disabled":0,"moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * migxResizeOnUpload Plugin\\n *\\n * Events: OnFileManagerUpload\\n * Author: Bruno Perner <b.perner@gmx.de>\\n * Modified to read multiple configs from mediasource-property\\n * \\n * First Author: Vasiliy Naumkin <bezumkin@yandex.ru>\\n * Required: PhpThumbOf snippet for resizing images\\n * \\n * Example: mediasource - property \'resizeConfig\':\\n * [{\\"alias\\":\\"origin\\",\\"w\\":\\"500\\",\\"h\\":\\"500\\",\\"far\\":1},{\\"alias\\":\\"thumb\\",\\"w\\":\\"150\\",\\"h\\":\\"150\\",\\"far\\":1}]\\n *\\/\\n\\nif ($modx->event->name != \'OnFileManagerUpload\') {\\n    return;\\n}\\n\\n\\n$file = $modx->event->params[\'files\'][\'file\'];\\n$directory = $modx->event->params[\'directory\'];\\n\\nif ($file[\'error\'] != 0) {\\n    return;\\n}\\n\\n$name = $file[\'name\'];\\n\\/\\/$extensions = explode(\',\', $modx->getOption(\'upload_images\'));\\n\\n$source = $modx->event->params[\'source\'];\\n\\nif ($source instanceof modMediaSource) {\\n    \\/\\/$dirTree = $modx->getOption(\'dirtree\', $_REQUEST, \'\');\\n    \\/\\/$modx->setPlaceholder(\'docid\', $resource_id);\\n    $source->initialize();\\n    $basePath = str_replace(\'\\/.\\/\', \'\\/\', $source->getBasePath());\\n    \\/\\/$cachepath = $cachepath . $dirTree;\\n    $baseUrl = $modx->getOption(\'site_url\') . $source->getBaseUrl();\\n    \\/\\/$baseUrl = $baseUrl . $dirTree;\\n    $sourceProperties = $source->getPropertyList();\\n\\n    \\/\\/echo \'<pre>\' . print_r($sourceProperties, 1) . \'<\\/pre>\';\\n    \\/\\/$allowedExtensions = $modx->getOption(\'allowedFileTypes\', $sourceProperties, \'\');\\n    \\/\\/$allowedExtensions = empty($allowedExtensions) ? \'jpg,jpeg,png,gif\' : $allowedExtensions;\\n    \\/\\/$maxFilesizeMb = $modx->getOption(\'maxFilesizeMb\', $sourceProperties, \'8\');\\n    \\/\\/$maxFiles = $modx->getOption(\'maxFiles\', $sourceProperties, \'0\');\\n    \\/\\/$thumbX = $modx->getOption(\'thumbX\', $sourceProperties, \'100\');\\n    \\/\\/$thumbY = $modx->getOption(\'thumbY\', $sourceProperties, \'100\');\\n    $resizeConfigs = $modx->getOption(\'resizeConfigs\', $sourceProperties, \'\');\\n    $resizeConfigs = $modx->fromJson($resizeConfigs);\\n    $thumbscontainer = $modx->getOption(\'thumbscontainer\', $sourceProperties, \'thumbs\\/\');\\n    $imageExtensions = $modx->getOption(\'imageExtensions\', $sourceProperties, \'jpg,jpeg,png,gif,JPG\');\\n    $imageExtensions = explode(\',\', $imageExtensions);\\n    \\/\\/$uniqueFilenames = $modx->getOption(\'uniqueFilenames\', $sourceProperties, false);\\n    \\/\\/$onImageUpload = $modx->getOption(\'onImageUpload\', $sourceProperties, \'\');\\n    \\/\\/$onImageRemove = $modx->getOption(\'onImageRemove\', $sourceProperties, \'\');\\n    $cleanalias = $modx->getOption(\'cleanFilename\', $sourceProperties, false);\\n\\n}\\n\\nif (is_array($resizeConfigs) && count($resizeConfigs) > 0) {\\n    foreach ($resizeConfigs as $rc) {\\n        if (isset($rc[\'alias\'])) {\\n            $filePath = $basePath . $directory;\\n            $filePath = str_replace(\'\\/\\/\',\'\\/\',$filePath);\\n            if ($rc[\'alias\'] == \'origin\') {\\n                $thumbPath = $filePath;\\n            } else {\\n                $thumbPath = $filePath . $rc[\'alias\'] . \'\\/\';\\n                $permissions = octdec(\'0\' . (int)($modx->getOption(\'new_folder_permissions\', null, \'755\', true)));\\n                if (!@mkdir($thumbPath, $permissions, true)) {\\n                    $modx->log(MODX_LOG_LEVEL_ERROR, sprintf(\'[migxResourceMediaPath]: could not create directory %s).\', $thumbPath));\\n                } else {\\n                    chmod($thumbPath, $permissions);\\n                }\\n\\n            }\\n\\n\\n            $filename = $filePath . $name;\\n            $thumbname = $thumbPath . $name;\\n            $ext = substr(strrchr($name, \'.\'), 1);\\n            if (in_array($ext, $imageExtensions)) {\\n                $sizes = getimagesize($filename);\\n                echo $sizes[0]; \\n                \\/\\/$format = substr($sizes[\'mime\'], 6);\\n                if ($sizes[0] > $rc[\'w\'] || $sizes[1] > $rc[\'h\']) {\\n                    if ($sizes[0] < $rc[\'w\']) {\\n                        $rc[\'w\'] = $sizes[0];\\n                    }\\n                    if ($sizes[1] < $rc[\'h\']) {\\n                        $rc[\'h\'] = $sizes[1];\\n                    }\\n                    $type = $sizes[0] > $sizes[1] ? \'landscape\' : \'portrait\';\\n                    if (isset($rc[\'far\']) && $rc[\'far\'] == \'1\' && isset($rc[\'w\']) && isset($rc[\'h\'])) {\\n                        if ($type = \'landscape\') {\\n                            unset($rc[\'h\']);\\n                        }else {\\n                            unset($rc[\'w\']);\\n                        }\\n                    }\\n\\n                    $options = \'\';\\n                    foreach ($rc as $k => $v) {\\n                        if ($k != \'alias\') {\\n                            $options .= \'&\' . $k . \'=\' . $v;\\n                        }\\n                    }\\n                    $resized = $modx->runSnippet(\'phpthumbof\', array(\'input\' => $filePath . $name, \'options\' => $options));\\n                    rename(MODX_BASE_PATH . substr($resized, 1), $thumbname);\\n                }\\n            }\\n\\n\\n        }\\n    }\\n}"}',
        'guid' => 'be7813794262c60eda3bcb0bb9a4d377',
        'native_key' => NULL,
        'signature' => 'aac73a79c81d80006b35f948b6154d9f',
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'Children' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 
      array (
        0 => 'parent',
        1 => 'category',
      ),
    ),
    'Snippets' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Chunks' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Templates' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'templatename',
    ),
    'TemplateVars' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Plugins' => 
    array (
      'unique_key' => 'name',
      'preserve_keys' => false,
      'update_object' => true,
      'related_objects' => true,
      'related_object_attributes' => 
      array (
        'PluginEvents' => 
        array (
          'preserve_keys' => true,
          'update_object' => false,
          'unique_key' => 
          array (
            0 => 'pluginid',
            1 => 'event',
          ),
        ),
      ),
    ),
  ),
  'namespace' => 'migx',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'file',
      'body' => '{"source":"migx-3.0.0-alpha5\\/modCategory\\/c9f8c9cd59ed0d3d16e8987d505e8e66\\/0\\/","target":"return MODX_ASSETS_PATH . \'components\\/\';","name":"migx"}',
    ),
    1 => 
    array (
      'type' => 'file',
      'body' => '{"source":"migx-3.0.0-alpha5\\/modCategory\\/c9f8c9cd59ed0d3d16e8987d505e8e66\\/1\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"migx"}',
    ),
    2 => 
    array (
      'type' => 'php',
      'body' => '{"source":"migx-3.0.0-alpha5\\/modCategory\\/c9f8c9cd59ed0d3d16e8987d505e8e66.gpm.resolve.tables.resolver","type":"php","name":"gpm.resolve.tables"}',
    ),
    3 => 
    array (
      'type' => 'php',
      'body' => '{"source":"migx-3.0.0-alpha5\\/modCategory\\/c9f8c9cd59ed0d3d16e8987d505e8e66.resolve.synctables.resolver","type":"php","name":"resolve.synctables"}',
    ),
  ),
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => 'bc7c86c7710a583d555c4d7d4b4d719e',
  'package' => 'modx',
  'class' => 'modCategory',
  'signature' => 'c9f8c9cd59ed0d3d16e8987d505e8e66',
  'native_key' => NULL,
  'object' => '{"id":null,"parent":0,"category":"MIGX","rank":0}',
);